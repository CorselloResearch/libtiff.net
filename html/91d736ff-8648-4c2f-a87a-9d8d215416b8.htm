<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><link rel="SHORTCUT ICON" href="./../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style><link rel="stylesheet" type="text/css" href="./../styles/branding.css" /><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" /><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Process 16-bit TIFF (increase brightness)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="91d736ff-8648-4c2f-a87a-9d8d215416b8" /><meta name="Description" content="This sample shows how to read 16-bit TIFF image and process its pixels (create brighter version of the image)" /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="'true'" /><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" /><link type="text/css" rel="stylesheet" href="./../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"><!----></script><meta name="SelfBranded" content="true" /></head><body onload="onLoad()" class="primary-mtps-offline-document"><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn">Process 16-bit TIFF (increase brightness)</td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>This sample shows how to read 16-bit TIFF image and process its pixels (create brighter version of the image)</p><p></p><p>From this sample you can also learn how to pack bytes returned by ReadScanline method to 16-bit samples and</p><p>how to unpack 16-bit samples into a byte buffer that can be used by WriteScanline method.</p></div><div id="ID0EBAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EBAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EBAAAAA_tabimgleft"></div><div id="ID0EBAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EBAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EBAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EBAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EBAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EBAAAAA_tabimgright"></div></div><div id="ID0EBAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EBAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EBAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EBAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EBAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-keyword">using</span> System.IO;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> Process16BitSamples
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-keyword">using</span> (Tiff tiff = Tiff.Open(<span class="highlight-literal">@"Sample Data\16bit-lzw.tif"</span>, <span class="highlight-literal">"r"</span>))
            {
                <span class="highlight-keyword">int</span> width = tiff.GetField(TiffTag.IMAGEWIDTH)[<span class="highlight-number">0</span>].ToInt();
                <span class="highlight-keyword">int</span> height = tiff.GetField(TiffTag.IMAGELENGTH)[<span class="highlight-number">0</span>].ToInt();
                <span class="highlight-keyword">double</span> dpiX = tiff.GetField(TiffTag.XRESOLUTION)[<span class="highlight-number">0</span>].ToDouble();
                <span class="highlight-keyword">double</span> dpiY = tiff.GetField(TiffTag.YRESOLUTION)[<span class="highlight-number">0</span>].ToDouble();

                <span class="highlight-keyword">byte</span>[] scanline = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[tiff.ScanlineSize()];
                <span class="highlight-keyword">ushort</span>[] scanline16Bit = <span class="highlight-keyword">new</span> <span class="highlight-keyword">ushort</span>[tiff.ScanlineSize() / <span class="highlight-number">2</span>];

                <span class="highlight-keyword">using</span> (Tiff output = Tiff.Open(<span class="highlight-literal">"processed.tif"</span>, <span class="highlight-literal">"w"</span>))
                {
                    <span class="highlight-keyword">if</span> (output == <span class="highlight-keyword">null</span>)
                        <span class="highlight-keyword">return</span>;

                    output.SetField(TiffTag.IMAGEWIDTH, width);
                    output.SetField(TiffTag.IMAGELENGTH, height);
                    output.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">16</span>);
                    output.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">1</span>);
                    output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK);
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);
                    output.SetField(TiffTag.ROWSPERSTRIP, <span class="highlight-number">1</span>);
                    output.SetField(TiffTag.COMPRESSION, Compression.LZW);

                    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; height; i++)
                    {
                        tiff.ReadScanline(scanline, i);
                        MultiplyScanLineAs16BitSamples(scanline, scanline16Bit, <span class="highlight-number">16</span>);
                        output.WriteScanline(scanline, i);
                    }
                }

                Process.Start(<span class="highlight-literal">"processed.tif"</span>);
            }
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> MultiplyScanLineAs16BitSamples(<span class="highlight-keyword">byte</span>[] scanline, <span class="highlight-keyword">ushort</span>[] temp, <span class="highlight-keyword">ushort</span> factor)
        {
            <span class="highlight-keyword">if</span> (scanline.Length % <span class="highlight-number">2</span> != <span class="highlight-number">0</span>)
            {
                <span class="highlight-comment">// each two bytes define one sample so there should be even number of bytes</span> 
                <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> ArgumentException();
            }

            <span class="highlight-comment">// pack all bytes to ushorts</span>
            Buffer.BlockCopy(scanline, <span class="highlight-number">0</span>, temp, <span class="highlight-number">0</span>, scanline.Length);

            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; temp.Length; i++)
                temp[i] *= factor;

            <span class="highlight-comment">// unpack all ushorts to bytes</span>
            Buffer.BlockCopy(temp, <span class="highlight-number">0</span>, scanline, <span class="highlight-number">0</span>, scanline.Length);
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;

using BitMiracle.LibTiff.Classic;

namespace BitMiracle.LibTiff.Samples
{
    public static class Process16BitSamples
    {
        public static void Main()
        {
            using (Tiff tiff = Tiff.Open(@"Sample Data\16bit-lzw.tif", "r"))
            {
                int width = tiff.GetField(TiffTag.IMAGEWIDTH)[0].ToInt();
                int height = tiff.GetField(TiffTag.IMAGELENGTH)[0].ToInt();
                double dpiX = tiff.GetField(TiffTag.XRESOLUTION)[0].ToDouble();
                double dpiY = tiff.GetField(TiffTag.YRESOLUTION)[0].ToDouble();

                byte[] scanline = new byte[tiff.ScanlineSize()];
                ushort[] scanline16Bit = new ushort[tiff.ScanlineSize() / 2];

                using (Tiff output = Tiff.Open("processed.tif", "w"))
                {
                    if (output == null)
                        return;

                    output.SetField(TiffTag.IMAGEWIDTH, width);
                    output.SetField(TiffTag.IMAGELENGTH, height);
                    output.SetField(TiffTag.BITSPERSAMPLE, 16);
                    output.SetField(TiffTag.SAMPLESPERPIXEL, 1);
                    output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK);
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);
                    output.SetField(TiffTag.ROWSPERSTRIP, 1);
                    output.SetField(TiffTag.COMPRESSION, Compression.LZW);

                    for (int i = 0; i &lt; height; i++)
                    {
                        tiff.ReadScanline(scanline, i);
                        MultiplyScanLineAs16BitSamples(scanline, scanline16Bit, 16);
                        output.WriteScanline(scanline, i);
                    }
                }

                Process.Start("processed.tif");
            }
        }

        private static void MultiplyScanLineAs16BitSamples(byte[] scanline, ushort[] temp, ushort factor)
        {
            if (scanline.Length % 2 != 0)
            {
                // each two bytes define one sample so there should be even number of bytes 
                throw new ArgumentException();
            }

            // pack all bytes to ushorts
            Buffer.BlockCopy(scanline, 0, temp, 0, scanline.Length);

            for (int i = 0; i &lt; temp.Length; i++)
                temp[i] *= factor;

            // unpack all ushorts to bytes
            Buffer.BlockCopy(temp, 0, scanline, 0, scanline.Length);
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBAAAAA');</script><div id="ID0EAAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EAAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAAAAA_tabimgleft"></div><div id="ID0EAAAAAA_tab1" class="OH_CodeSnippetContainerTabDisabled" EnableCopyCode="true" disabled="true"><a>C#</a></div><div id="ID0EAAAAAA_tab2" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EAAAAAA','Visual Basic','2','4');return false;">VB</a></div><div id="ID0EAAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EAAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EAAAAAA_tabimgright"></div></div><div id="ID0EAAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EAAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EAAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EAAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EAAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre><span class="highlight-keyword">Imports</span> System
<span class="highlight-keyword">Imports</span> System.Diagnostics
<span class="highlight-keyword">Imports</span> System.Drawing
<span class="highlight-keyword">Imports</span> System.IO

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> Process16BitSamples
        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            <span class="highlight-keyword">Using</span> tif <span class="highlight-keyword">As</span> Tiff = Tiff.Open(<span class="highlight-literal">"Sample Data\16bit-lzw.tif"</span>, <span class="highlight-literal">"r"</span>)
                <span class="highlight-keyword">Dim</span> width <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = tif.GetField(TiffTag.IMAGEWIDTH)(<span class="highlight-number">0</span>).ToInt()
                <span class="highlight-keyword">Dim</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = tif.GetField(TiffTag.IMAGELENGTH)(<span class="highlight-number">0</span>).ToInt()
                <span class="highlight-keyword">Dim</span> dpiX <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = tif.GetField(TiffTag.XRESOLUTION)(<span class="highlight-number">0</span>).ToDouble()
                <span class="highlight-keyword">Dim</span> dpiY <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span> = tif.GetField(TiffTag.YRESOLUTION)(<span class="highlight-number">0</span>).ToDouble()

                <span class="highlight-keyword">Dim</span> scanline <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(tif.ScanlineSize() - <span class="highlight-number">1</span>) {}
                <span class="highlight-keyword">Dim</span> scanline16Bit <span class="highlight-keyword">As</span> <span class="highlight-keyword">UShort</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">UShort</span>(tif.ScanlineSize() / <span class="highlight-number">2</span> - <span class="highlight-number">1</span>) {}

                <span class="highlight-keyword">Using</span> output <span class="highlight-keyword">As</span> Tiff = Tiff.Open(<span class="highlight-literal">"processed.tif"</span>, <span class="highlight-literal">"w"</span>)
                    <span class="highlight-keyword">If</span> output <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span> 
                        <span class="highlight-keyword">Return</span> 
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                    output.SetField(TiffTag.IMAGEWIDTH, width)
                    output.SetField(TiffTag.IMAGELENGTH, height)
                    output.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">16</span>)
                    output.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">1</span>)
                    output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK)
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)
                    output.SetField(TiffTag.ROWSPERSTRIP, <span class="highlight-number">1</span>)
                    output.SetField(TiffTag.COMPRESSION, Compression.LZW)

                    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> height - <span class="highlight-number">1</span>
                        tif.ReadScanline(scanline, i)
                        MultiplyScanLineAs16BitSamples(scanline, scanline16Bit, <span class="highlight-number">16</span>)
                        output.WriteScanline(scanline, i)
                    <span class="highlight-keyword">Next</span> 
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

                Process.Start(<span class="highlight-literal">"processed.tif"</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span> 
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> MultiplyScanLineAs16BitSamples(scanline <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>(), temp <span class="highlight-keyword">As</span> <span class="highlight-keyword">UShort</span>(), factor <span class="highlight-keyword">As</span> <span class="highlight-keyword">UShort</span>)
            <span class="highlight-keyword">If</span> scanline.Length <span class="highlight-keyword">Mod</span> <span class="highlight-number">2</span> &lt;&gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span> 
                <span class="highlight-comment">' each two bytes define one sample so there should be even number of bytes</span> 
                <span class="highlight-keyword">Throw</span> <span class="highlight-keyword">New</span> ArgumentException()
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span> 

            <span class="highlight-comment">' pack all bytes to ushorts</span>
            Buffer.BlockCopy(scanline, <span class="highlight-number">0</span>, temp, <span class="highlight-number">0</span>, scanline.Length)

            <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> temp.Length - <span class="highlight-number">1</span>
                temp(i) *= factor
            <span class="highlight-keyword">Next</span> 

            <span class="highlight-comment">' unpack all ushorts to bytes</span>
            Buffer.BlockCopy(temp, <span class="highlight-number">0</span>, scanline, <span class="highlight-number">0</span>, scanline.Length)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span> 
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EAAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>Imports System
Imports System.Diagnostics
Imports System.Drawing
Imports System.IO

Imports BitMiracle.LibTiff.Classic

Namespace BitMiracle.LibTiff.Samples
    Public NotInheritable Class Process16BitSamples
        Public Shared Sub Main()
            Using tif As Tiff = Tiff.Open("Sample Data\16bit-lzw.tif", "r")
                Dim width As Integer = tif.GetField(TiffTag.IMAGEWIDTH)(0).ToInt()
                Dim height As Integer = tif.GetField(TiffTag.IMAGELENGTH)(0).ToInt()
                Dim dpiX As Double = tif.GetField(TiffTag.XRESOLUTION)(0).ToDouble()
                Dim dpiY As Double = tif.GetField(TiffTag.YRESOLUTION)(0).ToDouble()

                Dim scanline As Byte() = New Byte(tif.ScanlineSize() - 1) {}
                Dim scanline16Bit As UShort() = New UShort(tif.ScanlineSize() / 2 - 1) {}

                Using output As Tiff = Tiff.Open("processed.tif", "w")
                    If output Is Nothing Then 
                        Return 
                    End If

                    output.SetField(TiffTag.IMAGEWIDTH, width)
                    output.SetField(TiffTag.IMAGELENGTH, height)
                    output.SetField(TiffTag.BITSPERSAMPLE, 16)
                    output.SetField(TiffTag.SAMPLESPERPIXEL, 1)
                    output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK)
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)
                    output.SetField(TiffTag.ROWSPERSTRIP, 1)
                    output.SetField(TiffTag.COMPRESSION, Compression.LZW)

                    For i As Integer = 0 To height - 1
                        tif.ReadScanline(scanline, i)
                        MultiplyScanLineAs16BitSamples(scanline, scanline16Bit, 16)
                        output.WriteScanline(scanline, i)
                    Next 
                End Using

                Process.Start("processed.tif")
            End Using 
        End Sub 

        Private Shared Sub MultiplyScanLineAs16BitSamples(scanline As Byte(), temp As UShort(), factor As UShort)
            If scanline.Length Mod 2 &lt;&gt; 0 Then 
                ' each two bytes define one sample so there should be even number of bytes 
                Throw New ArgumentException()
            End If 

            ' pack all bytes to ushorts
            Buffer.BlockCopy(scanline, 0, temp, 0, scanline.Length)

            For i As Integer = 0 To temp.Length - 1
                temp(i) *= factor
            Next 

            ' unpack all ushorts to bytes
            Buffer.BlockCopy(temp, 0, scanline, 0, scanline.Length)
        End Sub 
    End Class 
End Namespace</pre></div><div id="ID0EAAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAAAAAA');</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p /><p><a href="http://www.bitmiracle.com/libtiff" target="_blank"><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /> 
						Copyright © 2008-2013 Bit Miracle. All rights reserved. (http://www.bitmiracle.com/libtiff)</a></p><div class="OH_feedbacklink"><a href="mailto:support@bitmiracle.com?subject=LibTiff.Net%2c+the+managed+version+of+the+LibTiff+library+for+reading+and+writing+TIFF.+Process+16-bit+TIFF+(increase+brightness)+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to support@bitmiracle.com.</div></div></body></html>