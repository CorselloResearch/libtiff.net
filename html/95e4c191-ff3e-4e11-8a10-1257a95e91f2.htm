<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><link rel="SHORTCUT ICON" href="./../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style><link rel="stylesheet" type="text/css" href="./../styles/branding.css" /><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" /><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>How to write TIFF tags before data (like in Cisco TIFF files)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="95e4c191-ff3e-4e11-8a10-1257a95e91f2" /><meta name="Description" content="This sample shows how to create a TIFF image with its tags saved before the image data." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="'true'" /><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" /><link type="text/css" rel="stylesheet" href="./../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"><!----></script><meta name="SelfBranded" content="true" /></head><body onload="onLoad()" class="primary-mtps-offline-document"><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn">How to write TIFF tags before data (like in Cisco TIFF files)</td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>This sample shows how to create a TIFF image with its tags saved before the image data.</p><p></p><p>By default, LibTiff.Net saves TIFF tags after the image data but some application or firmware</p><p>require TIFF images to have their tags saved before the image data.</p><p></p><p>For example, Cisco routers require TIFF files with tags saved before the data (so called Cisco TIFF File Format).</p></div><div id="ID0EBAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EBAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EBAAAAA_tabimgleft"></div><div id="ID0EBAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EBAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EBAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EBAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EBAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EBAAAAA_tabimgright"></div></div><div id="ID0EBAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EBAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EBAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EBAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EBAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-keyword">using</span> System.IO;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> WriteTagsBeforeData
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-keyword">string</span> fileName = <span class="highlight-literal">"random.tif"</span>;
            <span class="highlight-keyword">int</span> totalPages = <span class="highlight-number">3</span>;
            <span class="highlight-keyword">int</span> width = <span class="highlight-number">100</span>;
            <span class="highlight-keyword">int</span> height = <span class="highlight-number">150</span>;

            <span class="highlight-keyword">using</span> (Tiff output = Tiff.Open(fileName, <span class="highlight-literal">"w"</span>))
            {
                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">short</span> page = <span class="highlight-number">0</span>; page &lt;= totalPages - <span class="highlight-number">1</span>; page++)
                {
                    <span class="highlight-keyword">if</span> (page != <span class="highlight-number">0</span>)
                    {
                        <span class="highlight-comment">// save previous directory data</span>
                        output.WriteDirectory();

                        <span class="highlight-comment">// create new directory and make it current</span>
                        output.CreateDirectory();
                        output.SetDirectory(page);
                    }

                    <span class="highlight-comment">// setup image properties</span>
                    output.SetField(TiffTag.IMAGEWIDTH, width);
                    output.SetField(TiffTag.IMAGELENGTH, height);
                    output.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">1</span>);
                    output.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">16</span>);
                    output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT);
                    output.SetField(TiffTag.ROWSPERSTRIP, height);
                    output.SetField(TiffTag.XRESOLUTION, <span class="highlight-number">88.0</span>);
                    output.SetField(TiffTag.YRESOLUTION, <span class="highlight-number">88.0</span>);
                    output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.CENTIMETER);
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);
                    output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK);
                    output.SetField(TiffTag.COMPRESSION, Compression.NONE);
                    output.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB);

                    <span class="highlight-comment">// cause tags data to be put in an image</span>
                    output.CheckpointDirectory();

                    <span class="highlight-comment">// create image data</span>
                    Random random = <span class="highlight-keyword">new</span> Random();
                    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt;= height - <span class="highlight-number">1</span>; i++)
                    {
                        <span class="highlight-keyword">short</span>[] samples = <span class="highlight-keyword">new</span> <span class="highlight-keyword">short</span>[width];
                        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> j = <span class="highlight-number">0</span>; j &lt;= width - <span class="highlight-number">1</span>; j++)
                        {
                            samples[j] = Convert.ToInt16(random.Next(<span class="highlight-number">0</span>, <span class="highlight-keyword">short</span>.MaxValue));
                        }

                        <span class="highlight-keyword">byte</span>[] buf = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[samples.Length * <span class="highlight-number">2</span>];
                        Buffer.BlockCopy(samples, <span class="highlight-number">0</span>, buf, <span class="highlight-number">0</span>, buf.Length);
                        output.WriteScanline(buf, i);
                    }
                }
            }

            System.Diagnostics.Process.Start(fileName);
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;

using BitMiracle.LibTiff.Classic;

namespace BitMiracle.LibTiff.Samples
{
    public static class WriteTagsBeforeData
    {
        public static void Main()
        {
            string fileName = "random.tif";
            int totalPages = 3;
            int width = 100;
            int height = 150;

            using (Tiff output = Tiff.Open(fileName, "w"))
            {
                for (short page = 0; page &lt;= totalPages - 1; page++)
                {
                    if (page != 0)
                    {
                        // save previous directory data
                        output.WriteDirectory();

                        // create new directory and make it current
                        output.CreateDirectory();
                        output.SetDirectory(page);
                    }

                    // setup image properties
                    output.SetField(TiffTag.IMAGEWIDTH, width);
                    output.SetField(TiffTag.IMAGELENGTH, height);
                    output.SetField(TiffTag.SAMPLESPERPIXEL, 1);
                    output.SetField(TiffTag.BITSPERSAMPLE, 16);
                    output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT);
                    output.SetField(TiffTag.ROWSPERSTRIP, height);
                    output.SetField(TiffTag.XRESOLUTION, 88.0);
                    output.SetField(TiffTag.YRESOLUTION, 88.0);
                    output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.CENTIMETER);
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);
                    output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK);
                    output.SetField(TiffTag.COMPRESSION, Compression.NONE);
                    output.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB);

                    // cause tags data to be put in an image
                    output.CheckpointDirectory();

                    // create image data
                    Random random = new Random();
                    for (int i = 0; i &lt;= height - 1; i++)
                    {
                        short[] samples = new short[width];
                        for (int j = 0; j &lt;= width - 1; j++)
                        {
                            samples[j] = Convert.ToInt16(random.Next(0, short.MaxValue));
                        }

                        byte[] buf = new byte[samples.Length * 2];
                        Buffer.BlockCopy(samples, 0, buf, 0, buf.Length);
                        output.WriteScanline(buf, i);
                    }
                }
            }

            System.Diagnostics.Process.Start(fileName);
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBAAAAA');</script><div id="ID0EAAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EAAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAAAAA_tabimgleft"></div><div id="ID0EAAAAAA_tab1" class="OH_CodeSnippetContainerTabDisabled" EnableCopyCode="true" disabled="true"><a>C#</a></div><div id="ID0EAAAAAA_tab2" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EAAAAAA','Visual Basic','2','4');return false;">VB</a></div><div id="ID0EAAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EAAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EAAAAAA_tabimgright"></div></div><div id="ID0EAAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EAAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EAAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EAAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EAAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre><span class="highlight-keyword">Imports</span> System
<span class="highlight-keyword">Imports</span> System.Diagnostics
<span class="highlight-keyword">Imports</span> System.Drawing
<span class="highlight-keyword">Imports</span> System.IO

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> WriteTagsBeforeData
        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            <span class="highlight-keyword">Dim</span> fileName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"random.tif"</span> 
            <span class="highlight-keyword">Dim</span> totalPages <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">3</span> 
            <span class="highlight-keyword">Dim</span> width <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">100</span> 
            <span class="highlight-keyword">Dim</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">150</span> 

            <span class="highlight-keyword">Using</span> output <span class="highlight-keyword">As</span> Tiff = Tiff.Open(fileName, <span class="highlight-literal">"w"</span>)

                <span class="highlight-keyword">For</span> page <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> totalPages - <span class="highlight-number">1</span> 
                    <span class="highlight-keyword">If</span> page &lt;&gt; <span class="highlight-number">0</span> <span class="highlight-keyword">Then</span> 
                        <span class="highlight-comment">' save previous directory data</span>
                        output.WriteDirectory()

                        <span class="highlight-comment">' create new directory and make it current</span>
                        output.CreateDirectory()
                        output.SetDirectory(page)
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span> 

                    <span class="highlight-comment">' setup image properties</span>
                    output.SetField(TiffTag.IMAGEWIDTH, width)
                    output.SetField(TiffTag.IMAGELENGTH, height)
                    output.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">1</span>)
                    output.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">16</span>)
                    output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT)
                    output.SetField(TiffTag.ROWSPERSTRIP, height)
                    output.SetField(TiffTag.XRESOLUTION, <span class="highlight-number">88.0</span>)
                    output.SetField(TiffTag.YRESOLUTION, <span class="highlight-number">88.0</span>)
                    output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.CENTIMETER)
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)
                    output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK)
                    output.SetField(TiffTag.COMPRESSION, Compression.NONE)
                    output.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB)

                    <span class="highlight-comment">' cause tags data to be put in an image</span>
                    output.CheckpointDirectory()

                    <span class="highlight-comment">' create image data</span> 
                    <span class="highlight-keyword">Dim</span> random <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Random()
                    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> height - <span class="highlight-number">1</span> 
                        <span class="highlight-keyword">Dim</span> samples <span class="highlight-keyword">As</span> <span class="highlight-keyword">Short</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Short</span>(width - <span class="highlight-number">1</span>) {}
                        <span class="highlight-keyword">For</span> j <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> width - <span class="highlight-number">1</span>
                            samples(j) = <span class="highlight-keyword">CShort</span>(random.[<span class="highlight-keyword">Next</span>](<span class="highlight-number">0</span>, <span class="highlight-keyword">Short</span>.MaxValue))
                        <span class="highlight-keyword">Next</span> 

                        <span class="highlight-keyword">Dim</span> buf <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(samples.Length * <span class="highlight-number">2</span> - <span class="highlight-number">1</span>) {}
                        Buffer.BlockCopy(samples, <span class="highlight-number">0</span>, buf, <span class="highlight-number">0</span>, buf.Length)
                        output.WriteScanline(buf, i)
                    <span class="highlight-keyword">Next</span> 
                <span class="highlight-keyword">Next</span> 
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

            System.Diagnostics.Process.Start(fileName)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span> 
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EAAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>Imports System
Imports System.Diagnostics
Imports System.Drawing
Imports System.IO

Imports BitMiracle.LibTiff.Classic

Namespace BitMiracle.LibTiff.Samples
    Public NotInheritable Class WriteTagsBeforeData
        Public Shared Sub Main()
            Dim fileName As String = "random.tif" 
            Dim totalPages As Integer = 3 
            Dim width As Integer = 100 
            Dim height As Integer = 150 

            Using output As Tiff = Tiff.Open(fileName, "w")

                For page As Integer = 0 To totalPages - 1 
                    If page &lt;&gt; 0 Then 
                        ' save previous directory data
                        output.WriteDirectory()

                        ' create new directory and make it current
                        output.CreateDirectory()
                        output.SetDirectory(page)
                    End If 

                    ' setup image properties
                    output.SetField(TiffTag.IMAGEWIDTH, width)
                    output.SetField(TiffTag.IMAGELENGTH, height)
                    output.SetField(TiffTag.SAMPLESPERPIXEL, 1)
                    output.SetField(TiffTag.BITSPERSAMPLE, 16)
                    output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT)
                    output.SetField(TiffTag.ROWSPERSTRIP, height)
                    output.SetField(TiffTag.XRESOLUTION, 88.0)
                    output.SetField(TiffTag.YRESOLUTION, 88.0)
                    output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.CENTIMETER)
                    output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)
                    output.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISBLACK)
                    output.SetField(TiffTag.COMPRESSION, Compression.NONE)
                    output.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB)

                    ' cause tags data to be put in an image
                    output.CheckpointDirectory()

                    ' create image data 
                    Dim random As New Random()
                    For i As Integer = 0 To height - 1 
                        Dim samples As Short() = New Short(width - 1) {}
                        For j As Integer = 0 To width - 1
                            samples(j) = CShort(random.[Next](0, Short.MaxValue))
                        Next 

                        Dim buf As Byte() = New Byte(samples.Length * 2 - 1) {}
                        Buffer.BlockCopy(samples, 0, buf, 0, buf.Length)
                        output.WriteScanline(buf, i)
                    Next 
                Next 
            End Using

            System.Diagnostics.Process.Start(fileName)
        End Sub 
    End Class 
End Namespace</pre></div><div id="ID0EAAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAAAAAA');</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p /><p><a href="http://www.bitmiracle.com/libtiff" target="_blank"><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /> 
						Copyright © 2008-2013 Bit Miracle. All rights reserved. (http://www.bitmiracle.com/libtiff)</a></p><div class="OH_feedbacklink"><a href="mailto:support@bitmiracle.com?subject=LibTiff.Net%2c+the+managed+version+of+the+LibTiff+library+for+reading+and+writing+TIFF.+How+to+write+TIFF+tags+before+data+(like+in+Cisco+TIFF+files)+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to support@bitmiracle.com.</div></div></body></html>