<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><link rel="SHORTCUT ICON" href="./../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style><link rel="stylesheet" type="text/css" href="./../styles/branding.css" /><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" /><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Read and write custom TIFF tags</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="61b90b5d-8a3b-4122-a5f2-8674dda2b696" /><meta name="Description" content="This sample shows how to read and write custom TIFF tags." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="'true'" /><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" /><link type="text/css" rel="stylesheet" href="./../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"><!----></script><meta name="SelfBranded" content="true" /></head><body onload="onLoad()" class="primary-mtps-offline-document"><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn">Read and write custom TIFF tags</td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>This sample shows how to read and write custom TIFF tags.</p><p></p><p>Custom tags are tags unknown to the library. However, they may be read from a file or written to a file without problems. Special "extender callback" method should be used to instruct the library about format, names and other properties of such tags.</p><p></p><p>This sample shows how to create "extender callback" method, register that method with the library and use Tiff.MergeFieldInfo to merge description of your custom tags with other tags description. After that custom tags can be read or written as usual.</p></div><div id="ID0EBAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EBAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EBAAAAA_tabimgleft"></div><div id="ID0EBAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EBAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EBAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EBAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EBAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EBAAAAA_tabimgright"></div></div><div id="ID0EBAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EBAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EBAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EBAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EBAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> System.Windows.Forms;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> ReadWriteCustomTags
    {
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_ASCIITAG = (TiffTag)<span class="highlight-number">666</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_LONGTAG = (TiffTag)<span class="highlight-number">667</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_SHORTTAG = (TiffTag)<span class="highlight-number">668</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_RATIONALTAG = (TiffTag)<span class="highlight-number">669</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_FLOATTAG = (TiffTag)<span class="highlight-number">670</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_DOUBLETAG = (TiffTag)<span class="highlight-number">671</span>;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">const</span> TiffTag TIFFTAG_BYTETAG = (TiffTag)<span class="highlight-number">672</span>;

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> Tiff.TiffExtendProc m_parentExtender;

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> TagExtender(Tiff tif)
        {
            TiffFieldInfo[] tiffFieldInfo = 
            {
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_ASCIITAG, <span class="highlight-number">-1</span>, <span class="highlight-number">-1</span>, TiffType.ASCII, FieldBit.Custom, <span class="highlight-keyword">true</span>, <span class="highlight-keyword">false</span>, <span class="highlight-literal">"MyTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_SHORTTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.SHORT, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"ShortTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_LONGTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.LONG, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"LongTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_RATIONALTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.RATIONAL, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"RationalTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_FLOATTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.FLOAT, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"FloatTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_DOUBLETAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.DOUBLE, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"DoubleTag"</span>),
                <span class="highlight-keyword">new</span> TiffFieldInfo(TIFFTAG_BYTETAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.BYTE, FieldBit.Custom, <span class="highlight-keyword">false</span>, <span class="highlight-keyword">true</span>, <span class="highlight-literal">"ByteTag"</span>),
            };

            tif.MergeFieldInfo(tiffFieldInfo, tiffFieldInfo.Length);

            <span class="highlight-keyword">if</span> (m_parentExtender != <span class="highlight-keyword">null</span>)
                m_parentExtender(tif);
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-comment">// Define an image</span> 
            <span class="highlight-keyword">byte</span>[] buffer = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[<span class="highlight-number">25</span> * <span class="highlight-number">144</span>];

            <span class="highlight-comment">// Register the extender callback</span> 
            <span class="highlight-comment">// It's a good idea to keep track of the previous tag extender (if any) so that we can call it</span> 
            <span class="highlight-comment">// from our extender allowing a chain of customizations to take effect.</span>
            m_parentExtender = Tiff.SetTagExtender(TagExtender);

            <span class="highlight-keyword">string</span> outputFileName = writeTiffWithCustomTags(buffer);
            readCustomTags(outputFileName);

            <span class="highlight-comment">// restore previous tag extender</span>
            Tiff.SetTagExtender(m_parentExtender);
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">string</span> writeTiffWithCustomTags(<span class="highlight-keyword">byte</span>[] buffer)
        {
            <span class="highlight-keyword">string</span> outputFileName = <span class="highlight-literal">"output.tif"</span>;
            <span class="highlight-keyword">using</span> (Tiff image = Tiff.Open(outputFileName, <span class="highlight-literal">"w"</span>))
            {
                <span class="highlight-comment">// set up some basic tags before adding data</span>
                image.SetField(TiffTag.IMAGEWIDTH, <span class="highlight-number">25</span> * <span class="highlight-number">8</span>);
                image.SetField(TiffTag.IMAGELENGTH, <span class="highlight-number">144</span>);
                image.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">1</span>);
                image.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">1</span>);
                image.SetField(TiffTag.ROWSPERSTRIP, <span class="highlight-number">144</span>);

                image.SetField(TiffTag.COMPRESSION, Compression.CCITTFAX4);
                image.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISWHITE);
                image.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB);
                image.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);

                image.SetField(TiffTag.XRESOLUTION, <span class="highlight-number">150.0</span>);
                image.SetField(TiffTag.YRESOLUTION, <span class="highlight-number">150.0</span>);
                image.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH);

                <span class="highlight-comment">// set custom tags</span> 

                <span class="highlight-keyword">string</span> <span class="highlight-keyword">value</span> = <span class="highlight-literal">"Tag contents"</span>;
                image.SetField(TIFFTAG_ASCIITAG, <span class="highlight-keyword">value</span>);

                <span class="highlight-keyword">short</span>[] shorts = { <span class="highlight-number">263</span>, <span class="highlight-number">264</span> };
                image.SetField(TIFFTAG_SHORTTAG, <span class="highlight-number">2</span>, shorts);

                <span class="highlight-keyword">int</span>[] longs = { <span class="highlight-number">117</span>, <span class="highlight-number">118</span> };
                image.SetField(TIFFTAG_LONGTAG, <span class="highlight-number">2</span>, longs);

                <span class="highlight-keyword">float</span>[] rationals = { <span class="highlight-number">0.333333</span>f, <span class="highlight-number">0.444444</span>f };
                image.SetField(TIFFTAG_RATIONALTAG, <span class="highlight-number">2</span>, rationals);

                <span class="highlight-keyword">float</span>[] floats = { <span class="highlight-number">0.666666</span>f, <span class="highlight-number">0.777777</span>f };
                image.SetField(TIFFTAG_FLOATTAG, <span class="highlight-number">2</span>, floats);

                <span class="highlight-keyword">double</span>[] doubles = { <span class="highlight-number">0.1234567</span>, <span class="highlight-number">0.7654321</span> };
                image.SetField(TIFFTAG_DOUBLETAG, <span class="highlight-number">2</span>, doubles);

                <span class="highlight-keyword">byte</span>[] bytes = { <span class="highlight-number">89</span>, <span class="highlight-number">90</span> };
                image.SetField(TIFFTAG_BYTETAG, <span class="highlight-number">2</span>, bytes);

                <span class="highlight-comment">// Write the information to the file</span>
                image.WriteEncodedStrip(<span class="highlight-number">0</span>, buffer, <span class="highlight-number">25</span> * <span class="highlight-number">144</span>);
            }
            <span class="highlight-keyword">return</span> outputFileName;
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> readCustomTags(<span class="highlight-keyword">string</span> outputFileName)
        {
            <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> messageFormat = <span class="highlight-literal">"{0} is read ok: {1}\n"</span>;
            StringBuilder result = <span class="highlight-keyword">new</span> StringBuilder();

            <span class="highlight-comment">// Now open that TIFF back and read new tags</span> 
            <span class="highlight-keyword">using</span> (Tiff image = Tiff.Open(outputFileName, <span class="highlight-literal">"r"</span>))
            {
                FieldValue[] res = image.GetField(TIFFTAG_ASCIITAG);
                <span class="highlight-keyword">bool</span> tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">1</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToString() == <span class="highlight-literal">"Tag contents"</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"MyTag"</span>, tagOk);

                res = image.GetField(TIFFTAG_SHORTTAG);
                tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">1</span>].ToShortArray() != <span class="highlight-keyword">null</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"ShortTag"</span>, tagOk);

                res = image.GetField(TIFFTAG_LONGTAG);
                tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">1</span>].ToIntArray() != <span class="highlight-keyword">null</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"LongTag"</span>, tagOk);

                res = image.GetField(TIFFTAG_RATIONALTAG);
                tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">1</span>].ToFloatArray() != <span class="highlight-keyword">null</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"RationalTag"</span>, tagOk);

                res = image.GetField(TIFFTAG_FLOATTAG);
                tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">1</span>].ToFloatArray() != <span class="highlight-keyword">null</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"FloatTag"</span>, tagOk);

                res = image.GetField(TIFFTAG_DOUBLETAG);
                tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">1</span>].ToFloatArray() != <span class="highlight-keyword">null</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"DoubleTag"</span>, tagOk);

                res = image.GetField(TIFFTAG_BYTETAG);
                tagOk = (res != <span class="highlight-keyword">null</span> &amp;&amp; res.Length == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">0</span>].ToInt() == <span class="highlight-number">2</span> &amp;&amp; res[<span class="highlight-number">1</span>].ToByteArray() != <span class="highlight-keyword">null</span>);
                result.AppendFormat(messageFormat, <span class="highlight-literal">"ByteTag"</span>, tagOk);
            }

            MessageBox.Show(result.ToString());
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>using System.Diagnostics;
using System.Text;
using System.Windows.Forms;

using BitMiracle.LibTiff.Classic;

namespace BitMiracle.LibTiff.Samples
{
    public static class ReadWriteCustomTags
    {
        private const TiffTag TIFFTAG_ASCIITAG = (TiffTag)666;
        private const TiffTag TIFFTAG_LONGTAG = (TiffTag)667;
        private const TiffTag TIFFTAG_SHORTTAG = (TiffTag)668;
        private const TiffTag TIFFTAG_RATIONALTAG = (TiffTag)669;
        private const TiffTag TIFFTAG_FLOATTAG = (TiffTag)670;
        private const TiffTag TIFFTAG_DOUBLETAG = (TiffTag)671;
        private const TiffTag TIFFTAG_BYTETAG = (TiffTag)672;

        private static Tiff.TiffExtendProc m_parentExtender;

        public static void TagExtender(Tiff tif)
        {
            TiffFieldInfo[] tiffFieldInfo = 
            {
                new TiffFieldInfo(TIFFTAG_ASCIITAG, -1, -1, TiffType.ASCII, FieldBit.Custom, true, false, "MyTag"),
                new TiffFieldInfo(TIFFTAG_SHORTTAG, 2, 2, TiffType.SHORT, FieldBit.Custom, false, true, "ShortTag"),
                new TiffFieldInfo(TIFFTAG_LONGTAG, 2, 2, TiffType.LONG, FieldBit.Custom, false, true, "LongTag"),
                new TiffFieldInfo(TIFFTAG_RATIONALTAG, 2, 2, TiffType.RATIONAL, FieldBit.Custom, false, true, "RationalTag"),
                new TiffFieldInfo(TIFFTAG_FLOATTAG, 2, 2, TiffType.FLOAT, FieldBit.Custom, false, true, "FloatTag"),
                new TiffFieldInfo(TIFFTAG_DOUBLETAG, 2, 2, TiffType.DOUBLE, FieldBit.Custom, false, true, "DoubleTag"),
                new TiffFieldInfo(TIFFTAG_BYTETAG, 2, 2, TiffType.BYTE, FieldBit.Custom, false, true, "ByteTag"),
            };

            tif.MergeFieldInfo(tiffFieldInfo, tiffFieldInfo.Length);

            if (m_parentExtender != null)
                m_parentExtender(tif);
        }

        public static void Main()
        {
            // Define an image 
            byte[] buffer = new byte[25 * 144];

            // Register the extender callback 
            // It's a good idea to keep track of the previous tag extender (if any) so that we can call it 
            // from our extender allowing a chain of customizations to take effect.
            m_parentExtender = Tiff.SetTagExtender(TagExtender);

            string outputFileName = writeTiffWithCustomTags(buffer);
            readCustomTags(outputFileName);

            // restore previous tag extender
            Tiff.SetTagExtender(m_parentExtender);
        }

        private static string writeTiffWithCustomTags(byte[] buffer)
        {
            string outputFileName = "output.tif";
            using (Tiff image = Tiff.Open(outputFileName, "w"))
            {
                // set up some basic tags before adding data
                image.SetField(TiffTag.IMAGEWIDTH, 25 * 8);
                image.SetField(TiffTag.IMAGELENGTH, 144);
                image.SetField(TiffTag.BITSPERSAMPLE, 1);
                image.SetField(TiffTag.SAMPLESPERPIXEL, 1);
                image.SetField(TiffTag.ROWSPERSTRIP, 144);

                image.SetField(TiffTag.COMPRESSION, Compression.CCITTFAX4);
                image.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISWHITE);
                image.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB);
                image.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);

                image.SetField(TiffTag.XRESOLUTION, 150.0);
                image.SetField(TiffTag.YRESOLUTION, 150.0);
                image.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH);

                // set custom tags 

                string value = "Tag contents";
                image.SetField(TIFFTAG_ASCIITAG, value);

                short[] shorts = { 263, 264 };
                image.SetField(TIFFTAG_SHORTTAG, 2, shorts);

                int[] longs = { 117, 118 };
                image.SetField(TIFFTAG_LONGTAG, 2, longs);

                float[] rationals = { 0.333333f, 0.444444f };
                image.SetField(TIFFTAG_RATIONALTAG, 2, rationals);

                float[] floats = { 0.666666f, 0.777777f };
                image.SetField(TIFFTAG_FLOATTAG, 2, floats);

                double[] doubles = { 0.1234567, 0.7654321 };
                image.SetField(TIFFTAG_DOUBLETAG, 2, doubles);

                byte[] bytes = { 89, 90 };
                image.SetField(TIFFTAG_BYTETAG, 2, bytes);

                // Write the information to the file
                image.WriteEncodedStrip(0, buffer, 25 * 144);
            }
            return outputFileName;
        }

        private static void readCustomTags(string outputFileName)
        {
            const string messageFormat = "{0} is read ok: {1}\n";
            StringBuilder result = new StringBuilder();

            // Now open that TIFF back and read new tags 
            using (Tiff image = Tiff.Open(outputFileName, "r"))
            {
                FieldValue[] res = image.GetField(TIFFTAG_ASCIITAG);
                bool tagOk = (res != null &amp;&amp; res.Length == 1 &amp;&amp; res[0].ToString() == "Tag contents");
                result.AppendFormat(messageFormat, "MyTag", tagOk);

                res = image.GetField(TIFFTAG_SHORTTAG);
                tagOk = (res != null &amp;&amp; res.Length == 2 &amp;&amp; res[0].ToInt() == 2 &amp;&amp; res[1].ToShortArray() != null);
                result.AppendFormat(messageFormat, "ShortTag", tagOk);

                res = image.GetField(TIFFTAG_LONGTAG);
                tagOk = (res != null &amp;&amp; res.Length == 2 &amp;&amp; res[0].ToInt() == 2 &amp;&amp; res[1].ToIntArray() != null);
                result.AppendFormat(messageFormat, "LongTag", tagOk);

                res = image.GetField(TIFFTAG_RATIONALTAG);
                tagOk = (res != null &amp;&amp; res.Length == 2 &amp;&amp; res[0].ToInt() == 2 &amp;&amp; res[1].ToFloatArray() != null);
                result.AppendFormat(messageFormat, "RationalTag", tagOk);

                res = image.GetField(TIFFTAG_FLOATTAG);
                tagOk = (res != null &amp;&amp; res.Length == 2 &amp;&amp; res[0].ToInt() == 2 &amp;&amp; res[1].ToFloatArray() != null);
                result.AppendFormat(messageFormat, "FloatTag", tagOk);

                res = image.GetField(TIFFTAG_DOUBLETAG);
                tagOk = (res != null &amp;&amp; res.Length == 2 &amp;&amp; res[0].ToInt() == 2 &amp;&amp; res[1].ToFloatArray() != null);
                result.AppendFormat(messageFormat, "DoubleTag", tagOk);

                res = image.GetField(TIFFTAG_BYTETAG);
                tagOk = (res != null &amp;&amp; res.Length == 2 &amp;&amp; res[0].ToInt() == 2 &amp;&amp; res[1].ToByteArray() != null);
                result.AppendFormat(messageFormat, "ByteTag", tagOk);
            }

            MessageBox.Show(result.ToString());
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBAAAAA');</script><div id="ID0EAAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EAAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAAAAA_tabimgleft"></div><div id="ID0EAAAAAA_tab1" class="OH_CodeSnippetContainerTabDisabled" EnableCopyCode="true" disabled="true"><a>C#</a></div><div id="ID0EAAAAAA_tab2" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EAAAAAA','Visual Basic','2','4');return false;">VB</a></div><div id="ID0EAAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EAAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EAAAAAA_tabimgright"></div></div><div id="ID0EAAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EAAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EAAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EAAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EAAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre><span class="highlight-keyword">Imports</span> Microsoft.VisualBasic
<span class="highlight-keyword">Imports</span> System.Diagnostics
<span class="highlight-keyword">Imports</span> System.Text
<span class="highlight-keyword">Imports</span> System.Windows.Forms

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> ReadWriteCustomTags
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_ASCIITAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">666</span>, TiffTag)
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_LONGTAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">667</span>, TiffTag)
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_SHORTTAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">668</span>, TiffTag)
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_RATIONALTAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">669</span>, TiffTag)
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_FLOATTAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">670</span>, TiffTag)
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_DOUBLETAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">671</span>, TiffTag)
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Const</span> TIFFTAG_BYTETAG <span class="highlight-keyword">As</span> TiffTag = <span class="highlight-keyword">DirectCast</span>(<span class="highlight-number">672</span>, TiffTag)

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> m_parentExtender <span class="highlight-keyword">As</span> Tiff.TiffExtendProc

        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> TagExtender(<span class="highlight-keyword">ByVal</span> tif <span class="highlight-keyword">As</span> Tiff)
            <span class="highlight-keyword">Dim</span> tiffFieldInfo <span class="highlight-keyword">As</span> TiffFieldInfo() = {<span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_ASCIITAG, <span class="highlight-number">-1</span>, <span class="highlight-number">-1</span>, TiffType.ASCII, FieldBit.[Custom], <span class="highlight-keyword">True</span>, _
             <span class="highlight-keyword">False</span>, <span class="highlight-literal">"MyTag"</span>), <span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_SHORTTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.[<span class="highlight-keyword">SHORT</span>], FieldBit.[Custom], <span class="highlight-keyword">False</span>, _
             <span class="highlight-keyword">True</span>, <span class="highlight-literal">"ShortTag"</span>), <span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_LONGTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.[<span class="highlight-keyword">LONG</span>], FieldBit.[Custom], <span class="highlight-keyword">False</span>, _
             <span class="highlight-keyword">True</span>, <span class="highlight-literal">"LongTag"</span>), <span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_RATIONALTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.RATIONAL, FieldBit.[Custom], <span class="highlight-keyword">False</span>, _
             <span class="highlight-keyword">True</span>, <span class="highlight-literal">"RationalTag"</span>), <span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_FLOATTAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.FLOAT, FieldBit.[Custom], <span class="highlight-keyword">False</span>, _
             <span class="highlight-keyword">True</span>, <span class="highlight-literal">"FloatTag"</span>), <span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_DOUBLETAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.[<span class="highlight-keyword">DOUBLE</span>], FieldBit.[Custom], <span class="highlight-keyword">False</span>, _
             <span class="highlight-keyword">True</span>, <span class="highlight-literal">"DoubleTag"</span>), _
             <span class="highlight-keyword">New</span> TiffFieldInfo(TIFFTAG_BYTETAG, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, TiffType.[<span class="highlight-keyword">BYTE</span>], FieldBit.[Custom], <span class="highlight-keyword">False</span>, _
             <span class="highlight-keyword">True</span>, <span class="highlight-literal">"ByteTag"</span>)}

            tif.MergeFieldInfo(tiffFieldInfo, tiffFieldInfo.Length)

            <span class="highlight-keyword">If</span> m_parentExtender <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                m_parentExtender.Invoke(tif)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span> 

        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 

        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            <span class="highlight-comment">' Define an image</span> 
            <span class="highlight-keyword">Dim</span> buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(<span class="highlight-number">25</span> * <span class="highlight-number">144</span> - <span class="highlight-number">1</span>) {}

            <span class="highlight-comment">' Register the extender callback</span> 
            <span class="highlight-comment">' It's a good idea to keep track of the previous tag extender (if any) so that we can call it</span> 
            <span class="highlight-comment">' from our extender allowing a chain of customizations to take effect.</span>
            m_parentExtender = Tiff.SetTagExtender(<span class="highlight-keyword">AddressOf</span> TagExtender)

            <span class="highlight-keyword">Dim</span> outputFileName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = writeTiffWithCustomTags(buffer)
            readCustomTags(outputFileName)

            <span class="highlight-comment">' restore previous tag extender</span>
            Tiff.SetTagExtender(m_parentExtender)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> writeTiffWithCustomTags(<span class="highlight-keyword">ByVal</span> buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>()) <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> 
            <span class="highlight-keyword">Dim</span> outputFileName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"output.tif"</span> 
            <span class="highlight-keyword">Using</span> image <span class="highlight-keyword">As</span> Tiff = Tiff.Open(outputFileName, <span class="highlight-literal">"w"</span>)
                <span class="highlight-comment">' set up some basic tags before adding data</span>
                image.SetField(TiffTag.IMAGEWIDTH, <span class="highlight-number">25</span> * <span class="highlight-number">8</span>)
                image.SetField(TiffTag.IMAGELENGTH, <span class="highlight-number">144</span>)
                image.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">1</span>)
                image.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">1</span>)
                image.SetField(TiffTag.ROWSPERSTRIP, <span class="highlight-number">144</span>)

                image.SetField(TiffTag.COMPRESSION, Compression.CCITTFAX4)
                image.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISWHITE)
                image.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB)
                image.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)

                image.SetField(TiffTag.XRESOLUTION, <span class="highlight-number">150.0</span>)
                image.SetField(TiffTag.YRESOLUTION, <span class="highlight-number">150.0</span>)
                image.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH)

                <span class="highlight-comment">' set custom tags</span> 

                <span class="highlight-keyword">Dim</span> value <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"Tag contents"</span>
                image.SetField(TIFFTAG_ASCIITAG, value)

                <span class="highlight-keyword">Dim</span> shorts <span class="highlight-keyword">As</span> <span class="highlight-keyword">Short</span>() = {<span class="highlight-number">263</span>, <span class="highlight-number">264</span>}
                image.SetField(TIFFTAG_SHORTTAG, <span class="highlight-number">2</span>, shorts)

                <span class="highlight-keyword">Dim</span> longs <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>() = {<span class="highlight-number">117</span>, <span class="highlight-number">118</span>}
                image.SetField(TIFFTAG_LONGTAG, <span class="highlight-number">2</span>, longs)

                <span class="highlight-keyword">Dim</span> rationals <span class="highlight-keyword">As</span> <span class="highlight-keyword">Single</span>() = {<span class="highlight-number">0.333333</span>F, <span class="highlight-number">0.444444</span>F}
                image.SetField(TIFFTAG_RATIONALTAG, <span class="highlight-number">2</span>, rationals)

                <span class="highlight-keyword">Dim</span> floats <span class="highlight-keyword">As</span> <span class="highlight-keyword">Single</span>() = {<span class="highlight-number">0.666666</span>F, <span class="highlight-number">0.777777</span>F}
                image.SetField(TIFFTAG_FLOATTAG, <span class="highlight-number">2</span>, floats)

                <span class="highlight-keyword">Dim</span> doubles <span class="highlight-keyword">As</span> <span class="highlight-keyword">Double</span>() = {<span class="highlight-number">0.1234567</span>, <span class="highlight-number">0.7654321</span>}
                image.SetField(TIFFTAG_DOUBLETAG, <span class="highlight-number">2</span>, doubles)

                <span class="highlight-keyword">Dim</span> bytes <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = {<span class="highlight-number">89</span>, <span class="highlight-number">90</span>}
                image.SetField(TIFFTAG_BYTETAG, <span class="highlight-number">2</span>, bytes)

                <span class="highlight-comment">' Write the information to the file</span>
                image.WriteEncodedStrip(<span class="highlight-number">0</span>, buffer, <span class="highlight-number">25</span> * <span class="highlight-number">144</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span> 
            <span class="highlight-keyword">Return</span> outputFileName
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span> 

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> readCustomTags(<span class="highlight-keyword">ByVal</span> outputFileName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>)
            <span class="highlight-keyword">Const</span> messageFormat <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"{0} is read ok: {1}"</span> &amp; vbCrLf
            <span class="highlight-keyword">Dim</span> result <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> StringBuilder()

            <span class="highlight-comment">' Now open that TIFF back and read new tags</span> 
            <span class="highlight-keyword">Using</span> image <span class="highlight-keyword">As</span> Tiff = Tiff.Open(outputFileName, <span class="highlight-literal">"r"</span>)
                <span class="highlight-keyword">Dim</span> res <span class="highlight-keyword">As</span> FieldValue() = image.GetField(TIFFTAG_ASCIITAG)
                <span class="highlight-keyword">Dim</span> tagOk <span class="highlight-keyword">As</span> <span class="highlight-keyword">Boolean</span> = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">1</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToString() = <span class="highlight-literal">"Tag contents"</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"MyTag"</span>, tagOk)

                res = image.GetField(TIFFTAG_SHORTTAG)
                tagOk = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToInt() = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">1</span>).ToShortArray() <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"ShortTag"</span>, tagOk)

                res = image.GetField(TIFFTAG_LONGTAG)
                tagOk = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToInt() = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">1</span>).ToIntArray() <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"LongTag"</span>, tagOk)

                res = image.GetField(TIFFTAG_RATIONALTAG)
                tagOk = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToInt() = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">1</span>).ToFloatArray() <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"RationalTag"</span>, tagOk)

                res = image.GetField(TIFFTAG_FLOATTAG)
                tagOk = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToInt() = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">1</span>).ToFloatArray() <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"FloatTag"</span>, tagOk)

                res = image.GetField(TIFFTAG_DOUBLETAG)
                tagOk = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToInt() = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">1</span>).ToFloatArray() <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"DoubleTag"</span>, tagOk)

                res = image.GetField(TIFFTAG_BYTETAG)
                tagOk = (res <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">AndAlso</span> res.Length = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">0</span>).ToInt() = <span class="highlight-number">2</span> <span class="highlight-keyword">AndAlso</span> res(<span class="highlight-number">1</span>).ToByteArray() <span class="highlight-keyword">IsNot</span> <span class="highlight-keyword">Nothing</span>)
                result.AppendFormat(messageFormat, <span class="highlight-literal">"ByteTag"</span>, tagOk)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

            MessageBox.Show(result.ToString())
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span> 
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EAAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>Imports Microsoft.VisualBasic
Imports System.Diagnostics
Imports System.Text
Imports System.Windows.Forms

Imports BitMiracle.LibTiff.Classic

Namespace BitMiracle.LibTiff.Samples
    Public NotInheritable Class ReadWriteCustomTags
        Private Sub New()
        End Sub 
        Private Const TIFFTAG_ASCIITAG As TiffTag = DirectCast(666, TiffTag)
        Private Const TIFFTAG_LONGTAG As TiffTag = DirectCast(667, TiffTag)
        Private Const TIFFTAG_SHORTTAG As TiffTag = DirectCast(668, TiffTag)
        Private Const TIFFTAG_RATIONALTAG As TiffTag = DirectCast(669, TiffTag)
        Private Const TIFFTAG_FLOATTAG As TiffTag = DirectCast(670, TiffTag)
        Private Const TIFFTAG_DOUBLETAG As TiffTag = DirectCast(671, TiffTag)
        Private Const TIFFTAG_BYTETAG As TiffTag = DirectCast(672, TiffTag)

        Private Shared m_parentExtender As Tiff.TiffExtendProc

        Public Shared Sub TagExtender(ByVal tif As Tiff)
            Dim tiffFieldInfo As TiffFieldInfo() = {New TiffFieldInfo(TIFFTAG_ASCIITAG, -1, -1, TiffType.ASCII, FieldBit.[Custom], True, _
             False, "MyTag"), New TiffFieldInfo(TIFFTAG_SHORTTAG, 2, 2, TiffType.[SHORT], FieldBit.[Custom], False, _
             True, "ShortTag"), New TiffFieldInfo(TIFFTAG_LONGTAG, 2, 2, TiffType.[LONG], FieldBit.[Custom], False, _
             True, "LongTag"), New TiffFieldInfo(TIFFTAG_RATIONALTAG, 2, 2, TiffType.RATIONAL, FieldBit.[Custom], False, _
             True, "RationalTag"), New TiffFieldInfo(TIFFTAG_FLOATTAG, 2, 2, TiffType.FLOAT, FieldBit.[Custom], False, _
             True, "FloatTag"), New TiffFieldInfo(TIFFTAG_DOUBLETAG, 2, 2, TiffType.[DOUBLE], FieldBit.[Custom], False, _
             True, "DoubleTag"), _
             New TiffFieldInfo(TIFFTAG_BYTETAG, 2, 2, TiffType.[BYTE], FieldBit.[Custom], False, _
             True, "ByteTag")}

            tif.MergeFieldInfo(tiffFieldInfo, tiffFieldInfo.Length)

            If m_parentExtender IsNot Nothing Then
                m_parentExtender.Invoke(tif)
            End If 

        End Sub 

        Public Shared Sub Main()
            ' Define an image 
            Dim buffer As Byte() = New Byte(25 * 144 - 1) {}

            ' Register the extender callback 
            ' It's a good idea to keep track of the previous tag extender (if any) so that we can call it 
            ' from our extender allowing a chain of customizations to take effect.
            m_parentExtender = Tiff.SetTagExtender(AddressOf TagExtender)

            Dim outputFileName As String = writeTiffWithCustomTags(buffer)
            readCustomTags(outputFileName)

            ' restore previous tag extender
            Tiff.SetTagExtender(m_parentExtender)
        End Sub 

        Private Shared Function writeTiffWithCustomTags(ByVal buffer As Byte()) As String 
            Dim outputFileName As String = "output.tif" 
            Using image As Tiff = Tiff.Open(outputFileName, "w")
                ' set up some basic tags before adding data
                image.SetField(TiffTag.IMAGEWIDTH, 25 * 8)
                image.SetField(TiffTag.IMAGELENGTH, 144)
                image.SetField(TiffTag.BITSPERSAMPLE, 1)
                image.SetField(TiffTag.SAMPLESPERPIXEL, 1)
                image.SetField(TiffTag.ROWSPERSTRIP, 144)

                image.SetField(TiffTag.COMPRESSION, Compression.CCITTFAX4)
                image.SetField(TiffTag.PHOTOMETRIC, Photometric.MINISWHITE)
                image.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB)
                image.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)

                image.SetField(TiffTag.XRESOLUTION, 150.0)
                image.SetField(TiffTag.YRESOLUTION, 150.0)
                image.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH)

                ' set custom tags 

                Dim value As String = "Tag contents"
                image.SetField(TIFFTAG_ASCIITAG, value)

                Dim shorts As Short() = {263, 264}
                image.SetField(TIFFTAG_SHORTTAG, 2, shorts)

                Dim longs As Integer() = {117, 118}
                image.SetField(TIFFTAG_LONGTAG, 2, longs)

                Dim rationals As Single() = {0.333333F, 0.444444F}
                image.SetField(TIFFTAG_RATIONALTAG, 2, rationals)

                Dim floats As Single() = {0.666666F, 0.777777F}
                image.SetField(TIFFTAG_FLOATTAG, 2, floats)

                Dim doubles As Double() = {0.1234567, 0.7654321}
                image.SetField(TIFFTAG_DOUBLETAG, 2, doubles)

                Dim bytes As Byte() = {89, 90}
                image.SetField(TIFFTAG_BYTETAG, 2, bytes)

                ' Write the information to the file
                image.WriteEncodedStrip(0, buffer, 25 * 144)
            End Using 
            Return outputFileName
        End Function 

        Private Shared Sub readCustomTags(ByVal outputFileName As String)
            Const messageFormat As String = "{0} is read ok: {1}" &amp; vbCrLf
            Dim result As New StringBuilder()

            ' Now open that TIFF back and read new tags 
            Using image As Tiff = Tiff.Open(outputFileName, "r")
                Dim res As FieldValue() = image.GetField(TIFFTAG_ASCIITAG)
                Dim tagOk As Boolean = (res IsNot Nothing AndAlso res.Length = 1 AndAlso res(0).ToString() = "Tag contents")
                result.AppendFormat(messageFormat, "MyTag", tagOk)

                res = image.GetField(TIFFTAG_SHORTTAG)
                tagOk = (res IsNot Nothing AndAlso res.Length = 2 AndAlso res(0).ToInt() = 2 AndAlso res(1).ToShortArray() IsNot Nothing)
                result.AppendFormat(messageFormat, "ShortTag", tagOk)

                res = image.GetField(TIFFTAG_LONGTAG)
                tagOk = (res IsNot Nothing AndAlso res.Length = 2 AndAlso res(0).ToInt() = 2 AndAlso res(1).ToIntArray() IsNot Nothing)
                result.AppendFormat(messageFormat, "LongTag", tagOk)

                res = image.GetField(TIFFTAG_RATIONALTAG)
                tagOk = (res IsNot Nothing AndAlso res.Length = 2 AndAlso res(0).ToInt() = 2 AndAlso res(1).ToFloatArray() IsNot Nothing)
                result.AppendFormat(messageFormat, "RationalTag", tagOk)

                res = image.GetField(TIFFTAG_FLOATTAG)
                tagOk = (res IsNot Nothing AndAlso res.Length = 2 AndAlso res(0).ToInt() = 2 AndAlso res(1).ToFloatArray() IsNot Nothing)
                result.AppendFormat(messageFormat, "FloatTag", tagOk)

                res = image.GetField(TIFFTAG_DOUBLETAG)
                tagOk = (res IsNot Nothing AndAlso res.Length = 2 AndAlso res(0).ToInt() = 2 AndAlso res(1).ToFloatArray() IsNot Nothing)
                result.AppendFormat(messageFormat, "DoubleTag", tagOk)

                res = image.GetField(TIFFTAG_BYTETAG)
                tagOk = (res IsNot Nothing AndAlso res.Length = 2 AndAlso res(0).ToInt() = 2 AndAlso res(1).ToByteArray() IsNot Nothing)
                result.AppendFormat(messageFormat, "ByteTag", tagOk)
            End Using

            MessageBox.Show(result.ToString())
        End Sub 
    End Class 
End Namespace</pre></div><div id="ID0EAAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAAAAAA');</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p /><p><a href="http://www.bitmiracle.com/libtiff" target="_blank"><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /> 
						Copyright © 2008-2013 Bit Miracle. All rights reserved. (http://www.bitmiracle.com/libtiff)</a></p><div class="OH_feedbacklink"><a href="mailto:support@bitmiracle.com?subject=LibTiff.Net%2c+the+managed+version+of+the+LibTiff+library+for+reading+and+writing+TIFF.+Read+and+write+custom+TIFF+tags+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to support@bitmiracle.com.</div></div></body></html>