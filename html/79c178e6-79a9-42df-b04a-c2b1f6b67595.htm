<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><link rel="SHORTCUT ICON" href="./../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style><link rel="stylesheet" type="text/css" href="./../styles/branding.css" /><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" /><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>How to use a custom TiffStream to read or write TIFF images</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="79c178e6-79a9-42df-b04a-c2b1f6b67595" /><meta name="Description" content="This sample shows how to use a custom TiffStream to read and write TIFF images." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="'true'" /><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" /><link type="text/css" rel="stylesheet" href="./../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"><!----></script><meta name="SelfBranded" content="true" /></head><body onload="onLoad()" class="primary-mtps-offline-document"><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn">How to use a custom TiffStream to read or write TIFF images</td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>This sample shows how to use a custom TiffStream to read and write TIFF images.</p><p></p><p>Sometimes you may want to read or write TIFF images stored in an unusial places like byte buffers.</p><p>In such cases a custom TiffStream and ClientOpen method may help you.</p></div><div id="ID0EBAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EBAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EBAAAAA_tabimgleft"></div><div id="ID0EBAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EBAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EBAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EBAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EBAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EBAAAAA_tabimgright"></div></div><div id="ID0EBAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EBAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EBAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EBAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EBAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-keyword">using</span> System.IO;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> UsingCustomTiffStream
    {
        <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args)
        {
            MyStream stream = <span class="highlight-keyword">new</span> MyStream();

            <span class="highlight-comment">// Open the TIFF image for reading</span> 
            <span class="highlight-keyword">using</span> (Tiff image = Tiff.ClientOpen(<span class="highlight-literal">"custom"</span>, <span class="highlight-literal">"r"</span>, <span class="highlight-keyword">null</span>, stream))
            {
                <span class="highlight-keyword">if</span> (image == <span class="highlight-keyword">null</span>)
                    <span class="highlight-keyword">return</span>;

                <span class="highlight-comment">// Read image data here the same way</span> 
                <span class="highlight-comment">// as if LibTiff.Net was using regular image file</span>
                image.Close();
            }
        }

        <span class="highlight-comment">/// &lt;summary&gt;</span> 
        <span class="highlight-comment">/// Custom stream for LibTiff.Net.</span> 
        <span class="highlight-comment">/// Please consult documentation for TiffStream class for method parameters meaning.</span> 
        <span class="highlight-comment">/// &lt;/summary&gt;</span> 
        <span class="highlight-keyword">class</span> MyStream : TiffStream
        {
            <span class="highlight-comment">// You may implement any constructor you want here.</span> 

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">int</span> Read(<span class="highlight-keyword">object</span> clientData, <span class="highlight-keyword">byte</span>[] buffer, <span class="highlight-keyword">int</span> offset, <span class="highlight-keyword">int</span> count)
            {
                <span class="highlight-comment">// stub implementation</span> 
                <span class="highlight-keyword">return</span> <span class="highlight-number">-1</span>;
            }

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Write(<span class="highlight-keyword">object</span> clientData, <span class="highlight-keyword">byte</span>[] buffer, <span class="highlight-keyword">int</span> offset, <span class="highlight-keyword">int</span> count)
            {
                <span class="highlight-comment">// stub implementation</span>
            }

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">long</span> Seek(<span class="highlight-keyword">object</span> clientData, <span class="highlight-keyword">long</span> offset, System.IO.SeekOrigin whence)
            {
                <span class="highlight-comment">// stub implementation</span> 
                <span class="highlight-keyword">return</span> <span class="highlight-number">-1</span>;
            }

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Close(<span class="highlight-keyword">object</span> clientData)
            {
                <span class="highlight-comment">// stub implementation</span>
            }

            <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">long</span> Size(<span class="highlight-keyword">object</span> clientData)
            {
                <span class="highlight-comment">// stub implementation</span> 
                <span class="highlight-keyword">return</span> <span class="highlight-number">-1</span>;
            }
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;

using BitMiracle.LibTiff.Classic;

namespace BitMiracle.LibTiff.Samples
{
    public static class UsingCustomTiffStream
    {
        static void Main(string[] args)
        {
            MyStream stream = new MyStream();

            // Open the TIFF image for reading 
            using (Tiff image = Tiff.ClientOpen("custom", "r", null, stream))
            {
                if (image == null)
                    return;

                // Read image data here the same way 
                // as if LibTiff.Net was using regular image file
                image.Close();
            }
        }

        /// &lt;summary&gt; 
        /// Custom stream for LibTiff.Net. 
        /// Please consult documentation for TiffStream class for method parameters meaning. 
        /// &lt;/summary&gt; 
        class MyStream : TiffStream
        {
            // You may implement any constructor you want here. 

            public override int Read(object clientData, byte[] buffer, int offset, int count)
            {
                // stub implementation 
                return -1;
            }

            public override void Write(object clientData, byte[] buffer, int offset, int count)
            {
                // stub implementation
            }

            public override long Seek(object clientData, long offset, System.IO.SeekOrigin whence)
            {
                // stub implementation 
                return -1;
            }

            public override void Close(object clientData)
            {
                // stub implementation
            }

            public override long Size(object clientData)
            {
                // stub implementation 
                return -1;
            }
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBAAAAA');</script><div id="ID0EAAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EAAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAAAAA_tabimgleft"></div><div id="ID0EAAAAAA_tab1" class="OH_CodeSnippetContainerTabDisabled" EnableCopyCode="true" disabled="true"><a>C#</a></div><div id="ID0EAAAAAA_tab2" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EAAAAAA','Visual Basic','2','4');return false;">VB</a></div><div id="ID0EAAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EAAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EAAAAAA_tabimgright"></div></div><div id="ID0EAAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EAAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EAAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EAAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EAAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre><span class="highlight-keyword">Imports</span> System
<span class="highlight-keyword">Imports</span> System.Diagnostics
<span class="highlight-keyword">Imports</span> System.Drawing
<span class="highlight-keyword">Imports</span> System.IO

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> UsingCustomTiffStream
        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            <span class="highlight-keyword">Dim</span> stream <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> MyStream()

            <span class="highlight-comment">' Open the TIFF image for reading</span> 
            <span class="highlight-keyword">Using</span> image <span class="highlight-keyword">As</span> Tiff = Tiff.ClientOpen(<span class="highlight-literal">"custom"</span>, <span class="highlight-literal">"r"</span>, <span class="highlight-keyword">Nothing</span>, stream)
                <span class="highlight-keyword">If</span> image <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span> 
                    <span class="highlight-keyword">Return</span> 
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span> 

                <span class="highlight-comment">' Read image data here the same way</span> 
                <span class="highlight-comment">' as if LibTiff.Net was using regular image file</span>
                image.Close()
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span> 
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 

        <span class="highlight-comment">''' &lt;summary&gt;</span> 
        <span class="highlight-comment">''' Custom stream for LibTiff.Net.</span> 
        <span class="highlight-comment">''' Please consult documentation for TiffStream class for method parameters meaning.</span> 
        <span class="highlight-comment">''' &lt;/summary&gt;</span> 
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Class</span> MyStream
            <span class="highlight-keyword">Inherits</span> TiffStream
            <span class="highlight-comment">' You may implement any constructor you want here.</span> 

            <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> Read(clientData <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>(), offset <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>, count <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> 
                <span class="highlight-comment">' stub implementation</span> 
                <span class="highlight-keyword">Return</span> <span class="highlight-number">-1</span> 
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span> 

            <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> Write(clientData <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>(), offset <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>, count <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>)
                <span class="highlight-comment">' stub implementation</span> 
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 

            <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> Seek(clientData <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, offset <span class="highlight-keyword">As</span> <span class="highlight-keyword">Long</span>, whence <span class="highlight-keyword">As</span> System.IO.SeekOrigin) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Long</span> 
                <span class="highlight-comment">' stub implementation</span> 
                <span class="highlight-keyword">Return</span> <span class="highlight-number">-1</span> 
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span> 

            <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> Close(clientData <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>)
                <span class="highlight-comment">' stub implementation</span> 
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 

            <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Function</span> Size(clientData <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Long</span> 
                <span class="highlight-comment">' stub implementation</span> 
                <span class="highlight-keyword">Return</span> <span class="highlight-number">-1</span> 
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span> 
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span> 
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span> 
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EAAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>Imports System
Imports System.Diagnostics
Imports System.Drawing
Imports System.IO

Imports BitMiracle.LibTiff.Classic

Namespace BitMiracle.LibTiff.Samples
    Public NotInheritable Class UsingCustomTiffStream
        Public Shared Sub Main()
            Dim stream As New MyStream()

            ' Open the TIFF image for reading 
            Using image As Tiff = Tiff.ClientOpen("custom", "r", Nothing, stream)
                If image Is Nothing Then 
                    Return 
                End If 

                ' Read image data here the same way 
                ' as if LibTiff.Net was using regular image file
                image.Close()
            End Using 
        End Sub 

        ''' &lt;summary&gt; 
        ''' Custom stream for LibTiff.Net. 
        ''' Please consult documentation for TiffStream class for method parameters meaning. 
        ''' &lt;/summary&gt; 
        Private Class MyStream
            Inherits TiffStream
            ' You may implement any constructor you want here. 

            Public Overrides Function Read(clientData As Object, buffer As Byte(), offset As Integer, count As Integer) As Integer 
                ' stub implementation 
                Return -1 
            End Function 

            Public Overrides Sub Write(clientData As Object, buffer As Byte(), offset As Integer, count As Integer)
                ' stub implementation 
            End Sub 

            Public Overrides Function Seek(clientData As Object, offset As Long, whence As System.IO.SeekOrigin) As Long 
                ' stub implementation 
                Return -1 
            End Function 

            Public Overrides Sub Close(clientData As Object)
                ' stub implementation 
            End Sub 

            Public Overrides Function Size(clientData As Object) As Long 
                ' stub implementation 
                Return -1 
            End Function 
        End Class 
    End Class 
End Namespace</pre></div><div id="ID0EAAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAAAAAA');</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p /><p><a href="http://www.bitmiracle.com/libtiff" target="_blank"><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /> 
						Copyright © 2008-2013 Bit Miracle. All rights reserved. (http://www.bitmiracle.com/libtiff)</a></p><div class="OH_feedbacklink"><a href="mailto:support@bitmiracle.com?subject=LibTiff.Net%2c+the+managed+version+of+the+LibTiff+library+for+reading+and+writing+TIFF.+How+to+use+a+custom+TiffStream+to+read+or+write+TIFF+images+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to support@bitmiracle.com.</div></div></body></html>