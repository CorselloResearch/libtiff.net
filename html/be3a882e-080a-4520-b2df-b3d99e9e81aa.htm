<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><link rel="SHORTCUT ICON" href="./../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style><link rel="stylesheet" type="text/css" href="./../styles/branding.css" /><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" /><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Convert 16-bit grayscale TIFF to a 8-bit System.Drawing.Bitmap</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="be3a882e-080a-4520-b2df-b3d99e9e81aa" /><meta name="Description" content="This sample shows how to convert 16-bit grayscale TIFF image to a 8-bit System.Drawing.Bitmap." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="'true'" /><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" /><link type="text/css" rel="stylesheet" href="./../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"><!----></script><meta name="SelfBranded" content="true" /></head><body onload="onLoad()" class="primary-mtps-offline-document"><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn">Convert 16-bit grayscale TIFF to a 8-bit System.Drawing.Bitmap</td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>This sample shows how to convert 16-bit grayscale TIFF image to a 8-bit System.Drawing.Bitmap.</p></div><div id="ID0EBAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EBAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EBAAAAA_tabimgleft"></div><div id="ID0EBAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EBAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EBAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EBAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EBAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EBAAAAA_tabimgright"></div></div><div id="ID0EBAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EBAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EBAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EBAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EBAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-keyword">using</span> System.Drawing.Imaging;
<span class="highlight-keyword">using</span> System.Runtime.InteropServices;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> Convert16BitTo8Bit
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-keyword">using</span> (Bitmap tiff8bit = getBitmap8Bit(<span class="highlight-literal">@"Sample Data\16bit.tif"</span>))
            {
                <span class="highlight-keyword">if</span> (tiff8bit == <span class="highlight-keyword">null</span>)
                {
                    Console.WriteLine(<span class="highlight-literal">"Failed to convert image. Maybe input image does not exist or is not 16 bit."</span>);
                    <span class="highlight-keyword">return</span>;
                }

                tiff8bit.Save(<span class="highlight-literal">"Convert16BitTo8Bit.bmp"</span>);
                Process.Start(<span class="highlight-literal">"Convert16BitTo8Bit.bmp"</span>);
            }

        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> Bitmap getBitmap8Bit(<span class="highlight-keyword">string</span> inputName)
        {
            Bitmap result;

            <span class="highlight-keyword">using</span> (Tiff tif = Tiff.Open(inputName, <span class="highlight-literal">"r"</span>))
            {
                FieldValue[] res = tif.GetField(TiffTag.IMAGELENGTH);
                <span class="highlight-keyword">int</span> height = res[<span class="highlight-number">0</span>].ToInt();

                res = tif.GetField(TiffTag.IMAGEWIDTH);
                <span class="highlight-keyword">int</span> width = res[<span class="highlight-number">0</span>].ToInt();

                res = tif.GetField(TiffTag.BITSPERSAMPLE);
                <span class="highlight-keyword">short</span> bpp = res[<span class="highlight-number">0</span>].ToShort();
                <span class="highlight-keyword">if</span> (bpp != <span class="highlight-number">16</span>)
                    <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;

                res = tif.GetField(TiffTag.SAMPLESPERPIXEL);
                <span class="highlight-keyword">short</span> spp = res[<span class="highlight-number">0</span>].ToShort();
                <span class="highlight-keyword">if</span> (spp != <span class="highlight-number">1</span>)
                    <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;

                res = tif.GetField(TiffTag.PHOTOMETRIC);
                Photometric photo = (Photometric)res[<span class="highlight-number">0</span>].ToInt();
                <span class="highlight-keyword">if</span> (photo != Photometric.MINISBLACK &amp;&amp; photo != Photometric.MINISWHITE)
                    <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;

                <span class="highlight-keyword">int</span> stride = tif.ScanlineSize();
                <span class="highlight-keyword">byte</span>[] buffer = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[stride];

                result = <span class="highlight-keyword">new</span> Bitmap(width, height, PixelFormat.Format8bppIndexed);
                <span class="highlight-keyword">byte</span>[] buffer8Bit = <span class="highlight-keyword">null</span>;

                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; height; i++)
                {
                    Rectangle imgRect = <span class="highlight-keyword">new</span> Rectangle(<span class="highlight-number">0</span>, i, width, <span class="highlight-number">1</span>);
                    BitmapData imgData = result.LockBits(imgRect, ImageLockMode.WriteOnly, PixelFormat.Format8bppIndexed);

                    <span class="highlight-keyword">if</span> (buffer8Bit == <span class="highlight-keyword">null</span>)
                        buffer8Bit = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[imgData.Stride];
                    <span class="highlight-keyword">else</span>
                        Array.Clear(buffer8Bit, <span class="highlight-number">0</span>, buffer8Bit.Length);

                    tif.ReadScanline(buffer, i);
                    convertBuffer(buffer, buffer8Bit);

                    Marshal.Copy(buffer8Bit, <span class="highlight-number">0</span>, imgData.Scan0, buffer8Bit.Length);
                    result.UnlockBits(imgData);
                }
            }

            <span class="highlight-keyword">return</span> result;
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> convertBuffer(<span class="highlight-keyword">byte</span>[] buffer, <span class="highlight-keyword">byte</span>[] buffer8Bit)
        {
            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> src = <span class="highlight-number">0</span>, dst = <span class="highlight-number">0</span>; src &lt; buffer.Length; dst++)
            {
                <span class="highlight-keyword">int</span> value16 = buffer[src++];
                value16 = value16 + (buffer[src++] &lt;&lt; <span class="highlight-number">8</span>);
                buffer8Bit[dst] = (<span class="highlight-keyword">byte</span>)(value16 / <span class="highlight-number">257.0</span> + <span class="highlight-number">0.5</span>);
            }
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>using System;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

using BitMiracle.LibTiff.Classic;

namespace BitMiracle.LibTiff.Samples
{
    public static class Convert16BitTo8Bit
    {
        public static void Main()
        {
            using (Bitmap tiff8bit = getBitmap8Bit(@"Sample Data\16bit.tif"))
            {
                if (tiff8bit == null)
                {
                    Console.WriteLine("Failed to convert image. Maybe input image does not exist or is not 16 bit.");
                    return;
                }

                tiff8bit.Save("Convert16BitTo8Bit.bmp");
                Process.Start("Convert16BitTo8Bit.bmp");
            }

        }

        private static Bitmap getBitmap8Bit(string inputName)
        {
            Bitmap result;

            using (Tiff tif = Tiff.Open(inputName, "r"))
            {
                FieldValue[] res = tif.GetField(TiffTag.IMAGELENGTH);
                int height = res[0].ToInt();

                res = tif.GetField(TiffTag.IMAGEWIDTH);
                int width = res[0].ToInt();

                res = tif.GetField(TiffTag.BITSPERSAMPLE);
                short bpp = res[0].ToShort();
                if (bpp != 16)
                    return null;

                res = tif.GetField(TiffTag.SAMPLESPERPIXEL);
                short spp = res[0].ToShort();
                if (spp != 1)
                    return null;

                res = tif.GetField(TiffTag.PHOTOMETRIC);
                Photometric photo = (Photometric)res[0].ToInt();
                if (photo != Photometric.MINISBLACK &amp;&amp; photo != Photometric.MINISWHITE)
                    return null;

                int stride = tif.ScanlineSize();
                byte[] buffer = new byte[stride];

                result = new Bitmap(width, height, PixelFormat.Format8bppIndexed);
                byte[] buffer8Bit = null;

                for (int i = 0; i &lt; height; i++)
                {
                    Rectangle imgRect = new Rectangle(0, i, width, 1);
                    BitmapData imgData = result.LockBits(imgRect, ImageLockMode.WriteOnly, PixelFormat.Format8bppIndexed);

                    if (buffer8Bit == null)
                        buffer8Bit = new byte[imgData.Stride];
                    else
                        Array.Clear(buffer8Bit, 0, buffer8Bit.Length);

                    tif.ReadScanline(buffer, i);
                    convertBuffer(buffer, buffer8Bit);

                    Marshal.Copy(buffer8Bit, 0, imgData.Scan0, buffer8Bit.Length);
                    result.UnlockBits(imgData);
                }
            }

            return result;
        }

        private static void convertBuffer(byte[] buffer, byte[] buffer8Bit)
        {
            for (int src = 0, dst = 0; src &lt; buffer.Length; dst++)
            {
                int value16 = buffer[src++];
                value16 = value16 + (buffer[src++] &lt;&lt; 8);
                buffer8Bit[dst] = (byte)(value16 / 257.0 + 0.5);
            }
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBAAAAA');</script><div id="ID0EAAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EAAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAAAAA_tabimgleft"></div><div id="ID0EAAAAAA_tab1" class="OH_CodeSnippetContainerTabDisabled" EnableCopyCode="true" disabled="true"><a>C#</a></div><div id="ID0EAAAAAA_tab2" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EAAAAAA','Visual Basic','2','4');return false;">VB</a></div><div id="ID0EAAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EAAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EAAAAAA_tabimgright"></div></div><div id="ID0EAAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EAAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EAAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EAAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EAAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre><span class="highlight-keyword">Imports</span> System
<span class="highlight-keyword">Imports</span> System.Diagnostics
<span class="highlight-keyword">Imports</span> System.Drawing
<span class="highlight-keyword">Imports</span> System.Drawing.Imaging
<span class="highlight-keyword">Imports</span> System.Runtime.InteropServices

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> Convert16BitTo8Bit
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 
        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            <span class="highlight-keyword">Using</span> tiff8bit <span class="highlight-keyword">As</span> Bitmap = getBitmap8Bit(<span class="highlight-literal">"Sample Data\16bit.tif"</span>)
                <span class="highlight-keyword">If</span> tiff8bit <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                    Console.WriteLine(<span class="highlight-literal">"Failed to convert image. Maybe input image does not exist or is not 16 bit."</span>)
                    <span class="highlight-keyword">Return</span> 
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                tiff8bit.Save(<span class="highlight-literal">"Convert16BitTo8Bit.bmp"</span>)
                Process.Start(<span class="highlight-literal">"Convert16BitTo8Bit.bmp"</span>)
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span> 

        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> getBitmap8Bit(<span class="highlight-keyword">ByVal</span> inputName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span>) <span class="highlight-keyword">As</span> Bitmap
            <span class="highlight-keyword">Dim</span> result <span class="highlight-keyword">As</span> Bitmap

            <span class="highlight-keyword">Using</span> tif <span class="highlight-keyword">As</span> Tiff = Tiff.Open(inputName, <span class="highlight-literal">"r"</span>)
                <span class="highlight-keyword">Dim</span> res <span class="highlight-keyword">As</span> FieldValue() = tif.GetField(TiffTag.IMAGELENGTH)
                <span class="highlight-keyword">Dim</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = res(<span class="highlight-number">0</span>).ToInt()

                res = tif.GetField(TiffTag.IMAGEWIDTH)
                <span class="highlight-keyword">Dim</span> width <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = res(<span class="highlight-number">0</span>).ToInt()

                res = tif.GetField(TiffTag.BITSPERSAMPLE)
                <span class="highlight-keyword">Dim</span> bpp <span class="highlight-keyword">As</span> <span class="highlight-keyword">Short</span> = res(<span class="highlight-number">0</span>).ToShort()
                <span class="highlight-keyword">If</span> bpp &lt;&gt; <span class="highlight-number">16</span> <span class="highlight-keyword">Then</span> 
                    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">Nothing</span> 
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                res = tif.GetField(TiffTag.SAMPLESPERPIXEL)
                <span class="highlight-keyword">Dim</span> spp <span class="highlight-keyword">As</span> <span class="highlight-keyword">Short</span> = res(<span class="highlight-number">0</span>).ToShort()
                <span class="highlight-keyword">If</span> spp &lt;&gt; <span class="highlight-number">1</span> <span class="highlight-keyword">Then</span> 
                    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">Nothing</span> 
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                res = tif.GetField(TiffTag.PHOTOMETRIC)
                <span class="highlight-keyword">Dim</span> photo <span class="highlight-keyword">As</span> Photometric = <span class="highlight-keyword">DirectCast</span>(res(<span class="highlight-number">0</span>).ToInt(), Photometric)
                <span class="highlight-keyword">If</span> photo &lt;&gt; Photometric.MINISBLACK <span class="highlight-keyword">AndAlso</span> photo &lt;&gt; Photometric.MINISWHITE <span class="highlight-keyword">Then</span> 
                    <span class="highlight-keyword">Return</span> <span class="highlight-keyword">Nothing</span> 
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span> 

                <span class="highlight-keyword">Dim</span> stride <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = tif.ScanlineSize()
                <span class="highlight-keyword">Dim</span> buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(stride - <span class="highlight-number">1</span>) {}

                result = <span class="highlight-keyword">New</span> Bitmap(width, height, PixelFormat.Format8bppIndexed)
                <span class="highlight-keyword">Dim</span> buffer8Bit <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">Nothing</span> 

                <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> height - <span class="highlight-number">1</span> 
                    <span class="highlight-keyword">Dim</span> imgRect <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rectangle(<span class="highlight-number">0</span>, i, width, <span class="highlight-number">1</span>)
                    <span class="highlight-keyword">Dim</span> imgData <span class="highlight-keyword">As</span> BitmapData = result.LockBits(imgRect, ImageLockMode.[<span class="highlight-keyword">WriteOnly</span>], PixelFormat.Format8bppIndexed)

                    <span class="highlight-keyword">If</span> buffer8Bit <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                        buffer8Bit = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(imgData.Stride - <span class="highlight-number">1</span>) {}
                    <span class="highlight-keyword">Else</span>
                        Array.Clear(buffer8Bit, <span class="highlight-number">0</span>, buffer8Bit.Length)
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                    tif.ReadScanline(buffer, i)
                    convertBuffer(buffer, buffer8Bit)

                    Marshal.Copy(buffer8Bit, <span class="highlight-number">0</span>, imgData.Scan0, buffer8Bit.Length)
                    result.UnlockBits(imgData)
                <span class="highlight-keyword">Next</span> 
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span> 

            <span class="highlight-keyword">Return</span> result
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span> 

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> convertBuffer(<span class="highlight-keyword">ByVal</span> buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>(), <span class="highlight-keyword">ByVal</span> buffer8Bit <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>())
            <span class="highlight-keyword">Dim</span> src <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>, dst <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> 
            <span class="highlight-keyword">While</span> src &lt; buffer.Length
                <span class="highlight-keyword">Dim</span> value16 <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = buffer(src)
                src += <span class="highlight-number">1</span>
                value16 = value16 + (<span class="highlight-keyword">CType</span>(buffer(src), <span class="highlight-keyword">Integer</span>) &lt;&lt; <span class="highlight-number">8</span>)
                src += <span class="highlight-number">1</span>
                buffer8Bit(dst) = Math.Floor(value16 / <span class="highlight-number">257.0</span> + <span class="highlight-number">0.5</span>) <span class="highlight-keyword">Mod</span> <span class="highlight-number">256</span>
                dst += <span class="highlight-number">1</span> 
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span> 
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span> 
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EAAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>Imports System
Imports System.Diagnostics
Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.Runtime.InteropServices

Imports BitMiracle.LibTiff.Classic

Namespace BitMiracle.LibTiff.Samples
    Public NotInheritable Class Convert16BitTo8Bit
        Private Sub New()
        End Sub 
        Public Shared Sub Main()
            Using tiff8bit As Bitmap = getBitmap8Bit("Sample Data\16bit.tif")
                If tiff8bit Is Nothing Then
                    Console.WriteLine("Failed to convert image. Maybe input image does not exist or is not 16 bit.")
                    Return 
                End If

                tiff8bit.Save("Convert16BitTo8Bit.bmp")
                Process.Start("Convert16BitTo8Bit.bmp")
            End Using 

        End Sub 

        Private Shared Function getBitmap8Bit(ByVal inputName As String) As Bitmap
            Dim result As Bitmap

            Using tif As Tiff = Tiff.Open(inputName, "r")
                Dim res As FieldValue() = tif.GetField(TiffTag.IMAGELENGTH)
                Dim height As Integer = res(0).ToInt()

                res = tif.GetField(TiffTag.IMAGEWIDTH)
                Dim width As Integer = res(0).ToInt()

                res = tif.GetField(TiffTag.BITSPERSAMPLE)
                Dim bpp As Short = res(0).ToShort()
                If bpp &lt;&gt; 16 Then 
                    Return Nothing 
                End If

                res = tif.GetField(TiffTag.SAMPLESPERPIXEL)
                Dim spp As Short = res(0).ToShort()
                If spp &lt;&gt; 1 Then 
                    Return Nothing 
                End If

                res = tif.GetField(TiffTag.PHOTOMETRIC)
                Dim photo As Photometric = DirectCast(res(0).ToInt(), Photometric)
                If photo &lt;&gt; Photometric.MINISBLACK AndAlso photo &lt;&gt; Photometric.MINISWHITE Then 
                    Return Nothing 
                End If 

                Dim stride As Integer = tif.ScanlineSize()
                Dim buffer As Byte() = New Byte(stride - 1) {}

                result = New Bitmap(width, height, PixelFormat.Format8bppIndexed)
                Dim buffer8Bit As Byte() = Nothing 

                For i As Integer = 0 To height - 1 
                    Dim imgRect As New Rectangle(0, i, width, 1)
                    Dim imgData As BitmapData = result.LockBits(imgRect, ImageLockMode.[WriteOnly], PixelFormat.Format8bppIndexed)

                    If buffer8Bit Is Nothing Then
                        buffer8Bit = New Byte(imgData.Stride - 1) {}
                    Else
                        Array.Clear(buffer8Bit, 0, buffer8Bit.Length)
                    End If

                    tif.ReadScanline(buffer, i)
                    convertBuffer(buffer, buffer8Bit)

                    Marshal.Copy(buffer8Bit, 0, imgData.Scan0, buffer8Bit.Length)
                    result.UnlockBits(imgData)
                Next 
            End Using 

            Return result
        End Function 

        Private Shared Sub convertBuffer(ByVal buffer As Byte(), ByVal buffer8Bit As Byte())
            Dim src As Integer = 0, dst As Integer = 0 
            While src &lt; buffer.Length
                Dim value16 As Integer = buffer(src)
                src += 1
                value16 = value16 + (CType(buffer(src), Integer) &lt;&lt; 8)
                src += 1
                buffer8Bit(dst) = Math.Floor(value16 / 257.0 + 0.5) Mod 256
                dst += 1 
            End While 
        End Sub 
    End Class 
End Namespace</pre></div><div id="ID0EAAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAAAAAA');</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p /><p><a href="http://www.bitmiracle.com/libtiff" target="_blank"><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /> 
						Copyright © 2008-2013 Bit Miracle. All rights reserved. (http://www.bitmiracle.com/libtiff)</a></p><div class="OH_feedbacklink"><a href="mailto:support@bitmiracle.com?subject=LibTiff.Net%2c+the+managed+version+of+the+LibTiff+library+for+reading+and+writing+TIFF.+Convert+16-bit+grayscale+TIFF+to+a+8-bit+System.Drawing.Bitmap+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to support@bitmiracle.com.</div></div></body></html>