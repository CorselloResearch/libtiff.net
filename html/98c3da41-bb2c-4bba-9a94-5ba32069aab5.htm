<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><link rel="SHORTCUT ICON" href="./../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style><link rel="stylesheet" type="text/css" href="./../styles/branding.css" /><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" /><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Read RGB values of image pixels</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="98c3da41-bb2c-4bba-9a94-5ba32069aab5" /><meta name="Description" content="This sample shows how to read RGB value of any pixel in a TIFF image." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="'true'" /><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" /><link type="text/css" rel="stylesheet" href="./../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"><!----></script><meta name="SelfBranded" content="true" /></head><body onload="onLoad()" class="primary-mtps-offline-document"><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn">Read RGB values of image pixels</td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>This sample shows how to read RGB value of any pixel in a TIFF image.</p><p></p><p>The library provides methods that can decode almost any TIFF image and return array of packed RGBA values for its samples (pixels). This sample shows how to use  Tiff.ReadRGBAImage method to get packed sample values and Tiff.GetA/GetB/GetG/GetR to unpack individual components of an RGBA value.</p></div><div id="ID0EBAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EBAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EBAAAAA_tabimgleft"></div><div id="ID0EBAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EBAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EBAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EBAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EBAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EBAAAAA_tabimgright"></div></div><div id="ID0EBAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EBAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EBAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EBAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EBAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-keyword">using</span> System.Windows.Forms;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> ReadSamples
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-comment">// Open the TIFF image</span> 
            <span class="highlight-keyword">using</span> (Tiff image = Tiff.Open(<span class="highlight-literal">@"Sample Data\marbles.tif"</span>, <span class="highlight-literal">"r"</span>))
            {
                <span class="highlight-keyword">if</span> (image == <span class="highlight-keyword">null</span>)
                {
                    MessageBox.Show(<span class="highlight-literal">"Could not open incoming image"</span>);
                    <span class="highlight-keyword">return</span>;
                }

                <span class="highlight-comment">// Find the width and height of the image</span>
                FieldValue[] <span class="highlight-keyword">value</span> = image.GetField(TiffTag.IMAGEWIDTH);
                <span class="highlight-keyword">int</span> width = <span class="highlight-keyword">value</span>[<span class="highlight-number">0</span>].ToInt();

                <span class="highlight-keyword">value</span> = image.GetField(TiffTag.IMAGELENGTH);
                <span class="highlight-keyword">int</span> height = <span class="highlight-keyword">value</span>[<span class="highlight-number">0</span>].ToInt();

                <span class="highlight-keyword">int</span> imageSize = height * width;
                <span class="highlight-keyword">int</span>[] raster = <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[imageSize];

                <span class="highlight-comment">// Read the image into the memory buffer</span> 
                <span class="highlight-keyword">if</span> (!image.ReadRGBAImage(width, height, raster))
                {
                    MessageBox.Show(<span class="highlight-literal">"Could not read image"</span>);
                    <span class="highlight-keyword">return</span>;
                }

                <span class="highlight-keyword">using</span> (Bitmap bmp = <span class="highlight-keyword">new</span> Bitmap(<span class="highlight-number">200</span>, <span class="highlight-number">200</span>))
                {
                    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; bmp.Width; ++i)
                        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> j = <span class="highlight-number">0</span>; j &lt; bmp.Height; ++j)
                            bmp.SetPixel(i, j, getSample(i + <span class="highlight-number">330</span>, j + <span class="highlight-number">30</span>, raster, width, height));

                    bmp.Save(<span class="highlight-literal">"ReadSamples.bmp"</span>);
                }

            }

            Process.Start(<span class="highlight-literal">"ReadSamples.bmp"</span>);
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> Color getSample(<span class="highlight-keyword">int</span> x, <span class="highlight-keyword">int</span> y, <span class="highlight-keyword">int</span>[] raster, <span class="highlight-keyword">int</span> width, <span class="highlight-keyword">int</span> height)
        {
            <span class="highlight-keyword">int</span> offset = (height - y - <span class="highlight-number">1</span>) * width + x;
            <span class="highlight-keyword">int</span> red = Tiff.GetR(raster[offset]);
            <span class="highlight-keyword">int</span> green = Tiff.GetG(raster[offset]);
            <span class="highlight-keyword">int</span> blue = Tiff.GetB(raster[offset]);
            <span class="highlight-keyword">return</span> Color.FromArgb(red, green, blue);
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>using System.Diagnostics;
using System.Drawing;
using System.Windows.Forms;

using BitMiracle.LibTiff.Classic;

namespace BitMiracle.LibTiff.Samples
{
    public static class ReadSamples
    {
        public static void Main()
        {
            // Open the TIFF image 
            using (Tiff image = Tiff.Open(@"Sample Data\marbles.tif", "r"))
            {
                if (image == null)
                {
                    MessageBox.Show("Could not open incoming image");
                    return;
                }

                // Find the width and height of the image
                FieldValue[] value = image.GetField(TiffTag.IMAGEWIDTH);
                int width = value[0].ToInt();

                value = image.GetField(TiffTag.IMAGELENGTH);
                int height = value[0].ToInt();

                int imageSize = height * width;
                int[] raster = new int[imageSize];

                // Read the image into the memory buffer 
                if (!image.ReadRGBAImage(width, height, raster))
                {
                    MessageBox.Show("Could not read image");
                    return;
                }

                using (Bitmap bmp = new Bitmap(200, 200))
                {
                    for (int i = 0; i &lt; bmp.Width; ++i)
                        for (int j = 0; j &lt; bmp.Height; ++j)
                            bmp.SetPixel(i, j, getSample(i + 330, j + 30, raster, width, height));

                    bmp.Save("ReadSamples.bmp");
                }

            }

            Process.Start("ReadSamples.bmp");
        }

        private static Color getSample(int x, int y, int[] raster, int width, int height)
        {
            int offset = (height - y - 1) * width + x;
            int red = Tiff.GetR(raster[offset]);
            int green = Tiff.GetG(raster[offset]);
            int blue = Tiff.GetB(raster[offset]);
            return Color.FromArgb(red, green, blue);
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBAAAAA');</script><div id="ID0EAAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EAAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAAAAA_tabimgleft"></div><div id="ID0EAAAAAA_tab1" class="OH_CodeSnippetContainerTabDisabled" EnableCopyCode="true" disabled="true"><a>C#</a></div><div id="ID0EAAAAAA_tab2" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EAAAAAA','Visual Basic','2','4');return false;">VB</a></div><div id="ID0EAAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EAAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EAAAAAA_tabimgright"></div></div><div id="ID0EAAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EAAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EAAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EAAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EAAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre><span class="highlight-keyword">Imports</span> System.Diagnostics
<span class="highlight-keyword">Imports</span> System.Drawing
<span class="highlight-keyword">Imports</span> System.Windows.Forms

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> ReadSamples
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 
        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            <span class="highlight-comment">' Open the TIFF image</span> 
            <span class="highlight-keyword">Using</span> image <span class="highlight-keyword">As</span> Tiff = Tiff.Open(<span class="highlight-literal">"Sample Data\marbles.tif"</span>, <span class="highlight-literal">"r"</span>)
                <span class="highlight-keyword">If</span> image <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span> <span class="highlight-keyword">Then</span>
                    MessageBox.Show(<span class="highlight-literal">"Could not open incoming image"</span>)
                    <span class="highlight-keyword">Return</span> 
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span> 

                <span class="highlight-comment">' Find the width and height of the image</span> 
                <span class="highlight-keyword">Dim</span> value <span class="highlight-keyword">As</span> FieldValue() = image.GetField(TiffTag.IMAGEWIDTH)
                <span class="highlight-keyword">Dim</span> width <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = value(<span class="highlight-number">0</span>).ToInt()

                value = image.GetField(TiffTag.IMAGELENGTH)
                <span class="highlight-keyword">Dim</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = value(<span class="highlight-number">0</span>).ToInt()

                <span class="highlight-keyword">Dim</span> imageSize <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = height * width
                <span class="highlight-keyword">Dim</span> raster <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Integer</span>(imageSize - <span class="highlight-number">1</span>) {}

                <span class="highlight-comment">' Read the image into the memory buffer</span> 
                <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> image.ReadRGBAImage(width, height, raster) <span class="highlight-keyword">Then</span>
                    MessageBox.Show(<span class="highlight-literal">"Could not read image"</span>)
                    <span class="highlight-keyword">Return</span> 
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span> 

                <span class="highlight-keyword">Using</span> bmp <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Bitmap(<span class="highlight-number">200</span>, <span class="highlight-number">200</span>)
                    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> bmp.Width - <span class="highlight-number">1</span> 
                        <span class="highlight-keyword">For</span> j <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> bmp.Height - <span class="highlight-number">1</span>
                            bmp.SetPixel(i, j, getSample(i + <span class="highlight-number">330</span>, j + <span class="highlight-number">30</span>, raster, width, height))
                        <span class="highlight-keyword">Next</span> 
                    <span class="highlight-keyword">Next</span>

                    bmp.Save(<span class="highlight-literal">"ReadSamples.bmp"</span>)

                <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span> 
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

            Process.Start(<span class="highlight-literal">"ReadSamples.bmp"</span>)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> getSample(<span class="highlight-keyword">ByVal</span> x <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>, <span class="highlight-keyword">ByVal</span> y <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>, <span class="highlight-keyword">ByVal</span> raster <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>(), <span class="highlight-keyword">ByVal</span> width <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>, <span class="highlight-keyword">ByVal</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>) <span class="highlight-keyword">As</span> Color
            <span class="highlight-keyword">Dim</span> offset <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = (height - y - <span class="highlight-number">1</span>) * width + x
            <span class="highlight-keyword">Dim</span> red <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = Tiff.GetR(raster(offset))
            <span class="highlight-keyword">Dim</span> green <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = Tiff.GetG(raster(offset))
            <span class="highlight-keyword">Dim</span> blue <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = Tiff.GetB(raster(offset))
            <span class="highlight-keyword">Return</span> Color.FromArgb(red, green, blue)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span> 
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span> 
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EAAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>Imports System.Diagnostics
Imports System.Drawing
Imports System.Windows.Forms

Imports BitMiracle.LibTiff.Classic

Namespace BitMiracle.LibTiff.Samples
    Public NotInheritable Class ReadSamples
        Private Sub New()
        End Sub 
        Public Shared Sub Main()
            ' Open the TIFF image 
            Using image As Tiff = Tiff.Open("Sample Data\marbles.tif", "r")
                If image Is Nothing Then
                    MessageBox.Show("Could not open incoming image")
                    Return 
                End If 

                ' Find the width and height of the image 
                Dim value As FieldValue() = image.GetField(TiffTag.IMAGEWIDTH)
                Dim width As Integer = value(0).ToInt()

                value = image.GetField(TiffTag.IMAGELENGTH)
                Dim height As Integer = value(0).ToInt()

                Dim imageSize As Integer = height * width
                Dim raster As Integer() = New Integer(imageSize - 1) {}

                ' Read the image into the memory buffer 
                If Not image.ReadRGBAImage(width, height, raster) Then
                    MessageBox.Show("Could not read image")
                    Return 
                End If 

                Using bmp As New Bitmap(200, 200)
                    For i As Integer = 0 To bmp.Width - 1 
                        For j As Integer = 0 To bmp.Height - 1
                            bmp.SetPixel(i, j, getSample(i + 330, j + 30, raster, width, height))
                        Next 
                    Next

                    bmp.Save("ReadSamples.bmp")

                End Using 
            End Using

            Process.Start("ReadSamples.bmp")
        End Sub 

        Private Shared Function getSample(ByVal x As Integer, ByVal y As Integer, ByVal raster As Integer(), ByVal width As Integer, ByVal height As Integer) As Color
            Dim offset As Integer = (height - y - 1) * width + x
            Dim red As Integer = Tiff.GetR(raster(offset))
            Dim green As Integer = Tiff.GetG(raster(offset))
            Dim blue As Integer = Tiff.GetB(raster(offset))
            Return Color.FromArgb(red, green, blue)
        End Function 
    End Class 
End Namespace</pre></div><div id="ID0EAAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAAAAAA');</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p /><p><a href="http://www.bitmiracle.com/libtiff" target="_blank"><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /> 
						Copyright © 2008-2013 Bit Miracle. All rights reserved. (http://www.bitmiracle.com/libtiff)</a></p><div class="OH_feedbacklink"><a href="mailto:support@bitmiracle.com?subject=LibTiff.Net%2c+the+managed+version+of+the+LibTiff+library+for+reading+and+writing+TIFF.+Read+RGB+values+of+image+pixels+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to support@bitmiracle.com.</div></div></body></html>