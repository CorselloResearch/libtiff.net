<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><link rel="SHORTCUT ICON" href="./../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style><link rel="stylesheet" type="text/css" href="./../styles/branding.css" /><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" /><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Add page to existing TIFF</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="e5eb36a8-7150-41dd-8785-f8784a94c214" /><meta name="Description" content="This sample shows how to add new page to existing TIFF." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="'true'" /><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" /><link type="text/css" rel="stylesheet" href="./../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"><!----></script><meta name="SelfBranded" content="true" /></head><body onload="onLoad()" class="primary-mtps-offline-document"><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn">Add page to existing TIFF</td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>This sample shows how to add new page to existing TIFF.</p><p></p><p>In this sample we open existing TIFF and add new page to it. The page contents is the page number.</p></div><div id="ID0EBAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EBAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EBAAAAA_tabimgleft"></div><div id="ID0EBAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EBAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EBAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EBAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EBAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EBAAAAA_tabimgright"></div></div><div id="ID0EBAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EBAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EBAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EBAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EBAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> System.Drawing;
<span class="highlight-keyword">using</span> System.Drawing.Imaging;
<span class="highlight-keyword">using</span> System.IO;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> AddPageToTiff
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            File.Copy(<span class="highlight-literal">@"Sample Data\16bit.tif"</span>, <span class="highlight-literal">@"Sample Data\ToBeAppended.tif"</span>, <span class="highlight-keyword">true</span>);

            <span class="highlight-keyword">using</span> (Tiff image = Tiff.Open(<span class="highlight-literal">@"Sample Data\ToBeAppended.tif"</span>, <span class="highlight-literal">"a"</span>))
            {
                <span class="highlight-keyword">int</span> newPageNumber = image.NumberOfDirectories() + <span class="highlight-number">1</span>;
                <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> width = <span class="highlight-number">100</span>;
                <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> height = <span class="highlight-number">100</span>;

                image.SetField(TiffTag.IMAGEWIDTH, width);
                image.SetField(TiffTag.IMAGELENGTH, height);
                image.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">8</span>);
                image.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">3</span>);
                image.SetField(TiffTag.ROWSPERSTRIP, height);

                image.SetField(TiffTag.COMPRESSION, Compression.LZW);
                image.SetField(TiffTag.PHOTOMETRIC, Photometric.RGB);
                image.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB);
                image.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);

                <span class="highlight-keyword">byte</span>[] buffer = <span class="highlight-keyword">null</span>;
                <span class="highlight-keyword">using</span> (Bitmap bmp = <span class="highlight-keyword">new</span> Bitmap(width, height, PixelFormat.Format24bppRgb))
                {
                    <span class="highlight-keyword">using</span> (Graphics g = Graphics.FromImage(bmp))
                    {
                        g.FillRectangle(Brushes.White, g.VisibleClipBounds);
                        <span class="highlight-keyword">string</span> s = newPageNumber.ToString();
                        Font f = SystemFonts.DefaultFont;

                        SizeF size = g.MeasureString(s, f);
                        PointF loc = <span class="highlight-keyword">new</span> PointF(Math.Max((bmp.Width - size.Width) / <span class="highlight-number">2</span>, <span class="highlight-number">0</span>), Math.Max((bmp.Height - size.Height) / <span class="highlight-number">2</span>, <span class="highlight-number">0</span>));
                        g.DrawString(s, f, Brushes.Black, loc);

                        buffer = getImageRasterBytes(bmp, PixelFormat.Format24bppRgb);
                    }
                }

                <span class="highlight-keyword">int</span> stride = buffer.Length / height;
                convertRGBSamples(buffer, width, height);

                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>, offset = <span class="highlight-number">0</span>; i &lt; height; i++)
                {
                    image.WriteScanline(buffer, offset, i, <span class="highlight-number">0</span>);
                    offset += stride;
                }
            }

            Process.Start(<span class="highlight-literal">@"Sample Data\ToBeAppended.tif"</span>);
        }

        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">byte</span>[] getImageRasterBytes(Bitmap bmp, PixelFormat format)
        {
            Rectangle rect = <span class="highlight-keyword">new</span> Rectangle(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, bmp.Width, bmp.Height);
            <span class="highlight-keyword">byte</span>[] bits = <span class="highlight-keyword">null</span>;

            <span class="highlight-keyword">try</span>
            {
                <span class="highlight-comment">// Lock the managed memory</span>
                BitmapData bmpdata = bmp.LockBits(rect, ImageLockMode.ReadWrite, format);

                <span class="highlight-comment">// Declare an array to hold the bytes of the bitmap.</span>
                bits = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[bmpdata.Stride * bmpdata.Height];

                <span class="highlight-comment">// Copy the values into the array.</span>
                System.Runtime.InteropServices.Marshal.Copy(bmpdata.Scan0, bits, <span class="highlight-number">0</span>, bits.Length);

                <span class="highlight-comment">// Release managed memory</span>
                bmp.UnlockBits(bmpdata);
            }
            <span class="highlight-keyword">catch</span>
            {
                <span class="highlight-keyword">return</span> <span class="highlight-keyword">null</span>;
            }

            <span class="highlight-keyword">return</span> bits;
        }

        <span class="highlight-comment">/// &lt;summary&gt;</span> 
        <span class="highlight-comment">/// Converts BGR samples into RGB samples</span> 
        <span class="highlight-comment">/// &lt;/summary&gt;</span> 
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> convertRGBSamples(<span class="highlight-keyword">byte</span>[] data, <span class="highlight-keyword">int</span> width, <span class="highlight-keyword">int</span> height)
        {
            <span class="highlight-keyword">int</span> stride = data.Length / height;
            <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> samplesPerPixel = <span class="highlight-number">3</span>;

            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> y = <span class="highlight-number">0</span>; y &lt; height; y++)
            {
                <span class="highlight-keyword">int</span> offset = stride * y;
                <span class="highlight-keyword">int</span> strideEnd = offset + width * samplesPerPixel;

                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = offset; i &lt; strideEnd; i += samplesPerPixel)
                {
                    <span class="highlight-keyword">byte</span> temp = data[i + <span class="highlight-number">2</span>];
                    data[i + <span class="highlight-number">2</span>] = data[i];
                    data[i] = temp;
                }
            }
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>using System;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;

using BitMiracle.LibTiff.Classic;

namespace BitMiracle.LibTiff.Samples
{
    public static class AddPageToTiff
    {
        public static void Main()
        {
            File.Copy(@"Sample Data\16bit.tif", @"Sample Data\ToBeAppended.tif", true);

            using (Tiff image = Tiff.Open(@"Sample Data\ToBeAppended.tif", "a"))
            {
                int newPageNumber = image.NumberOfDirectories() + 1;
                const int width = 100;
                const int height = 100;

                image.SetField(TiffTag.IMAGEWIDTH, width);
                image.SetField(TiffTag.IMAGELENGTH, height);
                image.SetField(TiffTag.BITSPERSAMPLE, 8);
                image.SetField(TiffTag.SAMPLESPERPIXEL, 3);
                image.SetField(TiffTag.ROWSPERSTRIP, height);

                image.SetField(TiffTag.COMPRESSION, Compression.LZW);
                image.SetField(TiffTag.PHOTOMETRIC, Photometric.RGB);
                image.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB);
                image.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);

                byte[] buffer = null;
                using (Bitmap bmp = new Bitmap(width, height, PixelFormat.Format24bppRgb))
                {
                    using (Graphics g = Graphics.FromImage(bmp))
                    {
                        g.FillRectangle(Brushes.White, g.VisibleClipBounds);
                        string s = newPageNumber.ToString();
                        Font f = SystemFonts.DefaultFont;

                        SizeF size = g.MeasureString(s, f);
                        PointF loc = new PointF(Math.Max((bmp.Width - size.Width) / 2, 0), Math.Max((bmp.Height - size.Height) / 2, 0));
                        g.DrawString(s, f, Brushes.Black, loc);

                        buffer = getImageRasterBytes(bmp, PixelFormat.Format24bppRgb);
                    }
                }

                int stride = buffer.Length / height;
                convertRGBSamples(buffer, width, height);

                for (int i = 0, offset = 0; i &lt; height; i++)
                {
                    image.WriteScanline(buffer, offset, i, 0);
                    offset += stride;
                }
            }

            Process.Start(@"Sample Data\ToBeAppended.tif");
        }

        private static byte[] getImageRasterBytes(Bitmap bmp, PixelFormat format)
        {
            Rectangle rect = new Rectangle(0, 0, bmp.Width, bmp.Height);
            byte[] bits = null;

            try
            {
                // Lock the managed memory
                BitmapData bmpdata = bmp.LockBits(rect, ImageLockMode.ReadWrite, format);

                // Declare an array to hold the bytes of the bitmap.
                bits = new byte[bmpdata.Stride * bmpdata.Height];

                // Copy the values into the array.
                System.Runtime.InteropServices.Marshal.Copy(bmpdata.Scan0, bits, 0, bits.Length);

                // Release managed memory
                bmp.UnlockBits(bmpdata);
            }
            catch
            {
                return null;
            }

            return bits;
        }

        /// &lt;summary&gt; 
        /// Converts BGR samples into RGB samples 
        /// &lt;/summary&gt; 
        private static void convertRGBSamples(byte[] data, int width, int height)
        {
            int stride = data.Length / height;
            const int samplesPerPixel = 3;

            for (int y = 0; y &lt; height; y++)
            {
                int offset = stride * y;
                int strideEnd = offset + width * samplesPerPixel;

                for (int i = offset; i &lt; strideEnd; i += samplesPerPixel)
                {
                    byte temp = data[i + 2];
                    data[i + 2] = data[i];
                    data[i] = temp;
                }
            }
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBAAAAA');</script><div id="ID0EAAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EAAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAAAAA_tabimgleft"></div><div id="ID0EAAAAAA_tab1" class="OH_CodeSnippetContainerTabDisabled" EnableCopyCode="true" disabled="true"><a>C#</a></div><div id="ID0EAAAAAA_tab2" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EAAAAAA','Visual Basic','2','4');return false;">VB</a></div><div id="ID0EAAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EAAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EAAAAAA_tabimgright"></div></div><div id="ID0EAAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EAAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EAAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EAAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EAAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre><span class="highlight-keyword">Imports</span> System.Diagnostics
<span class="highlight-keyword">Imports</span> System.Drawing
<span class="highlight-keyword">Imports</span> System.Drawing.Imaging
<span class="highlight-keyword">Imports</span> System.IO

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> AddPageToTiff
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 
        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            File.Copy(<span class="highlight-literal">"Sample Data\16bit.tif"</span>, <span class="highlight-literal">"Sample Data\ToBeAppended.tif"</span>, <span class="highlight-keyword">True</span>)

            <span class="highlight-keyword">Using</span> image <span class="highlight-keyword">As</span> Tiff = Tiff.Open(<span class="highlight-literal">"Sample Data\ToBeAppended.tif"</span>, <span class="highlight-literal">"a"</span>)
                <span class="highlight-keyword">Dim</span> newPageNumber <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = image.NumberOfDirectories() + <span class="highlight-number">1</span> 
                <span class="highlight-keyword">Const</span> width <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">100</span> 
                <span class="highlight-keyword">Const</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">100</span>

                image.SetField(TiffTag.IMAGEWIDTH, width)
                image.SetField(TiffTag.IMAGELENGTH, height)
                image.SetField(TiffTag.BITSPERSAMPLE, <span class="highlight-number">8</span>)
                image.SetField(TiffTag.SAMPLESPERPIXEL, <span class="highlight-number">3</span>)
                image.SetField(TiffTag.ROWSPERSTRIP, height)

                image.SetField(TiffTag.COMPRESSION, Compression.LZW)
                image.SetField(TiffTag.PHOTOMETRIC, Photometric.RGB)
                image.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB)
                image.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)

                <span class="highlight-keyword">Dim</span> buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">Nothing</span> 
                <span class="highlight-keyword">Using</span> bmp <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Bitmap(width, height, PixelFormat.Format24bppRgb)
                    <span class="highlight-keyword">Using</span> g <span class="highlight-keyword">As</span> Graphics = Graphics.FromImage(bmp)
                        g.FillRectangle(Brushes.White, g.VisibleClipBounds)
                        <span class="highlight-keyword">Dim</span> s <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = newPageNumber.ToString()
                        <span class="highlight-keyword">Dim</span> f <span class="highlight-keyword">As</span> Font = SystemFonts.DefaultFont

                        <span class="highlight-keyword">Dim</span> size <span class="highlight-keyword">As</span> SizeF = g.MeasureString(s, f)
                        <span class="highlight-keyword">Dim</span> loc <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> PointF(Math.Max((bmp.Width - size.Width) / <span class="highlight-number">2</span>, <span class="highlight-number">0</span>), Math.Max((bmp.Height - size.Height) / <span class="highlight-number">2</span>, <span class="highlight-number">0</span>))
                        g.DrawString(s, f, Brushes.Black, loc)

                        buffer = getImageRasterBytes(bmp, PixelFormat.Format24bppRgb)
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span> 
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span> 

                <span class="highlight-keyword">Dim</span> stride <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = buffer.Length \ height
                convertRGBSamples(buffer, width, height)

                <span class="highlight-keyword">Dim</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span>, offset <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> 
                <span class="highlight-keyword">While</span> i &lt; height
                    image.WriteScanline(buffer, offset, i, <span class="highlight-number">0</span>)
                    offset += stride
                    i += <span class="highlight-number">1</span> 
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span> 
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

            Process.Start(<span class="highlight-literal">"Sample Data\ToBeAppended.tif"</span>)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 

        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Function</span> getImageRasterBytes(<span class="highlight-keyword">ByVal</span> bmp <span class="highlight-keyword">As</span> Bitmap, <span class="highlight-keyword">ByVal</span> format <span class="highlight-keyword">As</span> PixelFormat) <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>()
            <span class="highlight-keyword">Dim</span> rect <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Rectangle(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, bmp.Width, bmp.Height)
            <span class="highlight-keyword">Dim</span> bits <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>() = <span class="highlight-keyword">Nothing</span> 

            <span class="highlight-keyword">Try</span> 
                <span class="highlight-comment">' Lock the managed memory</span> 
                <span class="highlight-keyword">Dim</span> bmpdata <span class="highlight-keyword">As</span> BitmapData = bmp.LockBits(rect, ImageLockMode.ReadWrite, format)

                <span class="highlight-comment">' Declare an array to hold the bytes of the bitmap.</span>
                bits = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(bmpdata.Stride * bmpdata.Height - <span class="highlight-number">1</span>) {}

                <span class="highlight-comment">' Copy the values into the array.</span>
                System.Runtime.InteropServices.Marshal.Copy(bmpdata.Scan0, bits, <span class="highlight-number">0</span>, bits.Length)

                <span class="highlight-comment">' Release managed memory</span>
                bmp.UnlockBits(bmpdata)
            <span class="highlight-keyword">Catch</span> 
                <span class="highlight-keyword">Return</span> <span class="highlight-keyword">Nothing</span> 
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Try</span> 

            <span class="highlight-keyword">Return</span> bits
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Function</span> 

        <span class="highlight-comment">''' &lt;summary&gt;</span> 
        <span class="highlight-comment">''' Converts BGR samples into RGB samples</span> 
        <span class="highlight-comment">''' &lt;/summary&gt;</span> 
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> convertRGBSamples(<span class="highlight-keyword">ByVal</span> data <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>(), <span class="highlight-keyword">ByVal</span> width <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>, <span class="highlight-keyword">ByVal</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span>)
            <span class="highlight-keyword">Dim</span> stride <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = data.Length \ height
            <span class="highlight-keyword">Const</span> samplesPerPixel <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">3</span> 

            <span class="highlight-keyword">For</span> y <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> height - <span class="highlight-number">1</span> 
                <span class="highlight-keyword">Dim</span> offset <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = stride * y
                <span class="highlight-keyword">Dim</span> strideEnd <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = offset + width * samplesPerPixel

                <span class="highlight-keyword">Dim</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = offset
                <span class="highlight-keyword">While</span> i &lt; strideEnd
                    <span class="highlight-keyword">Dim</span> temp <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span> = data(i + <span class="highlight-number">2</span>)
                    data(i + <span class="highlight-number">2</span>) = data(i)
                    data(i) = temp
                    i += samplesPerPixel
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">While</span> 
            <span class="highlight-keyword">Next</span> 
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span> 
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EAAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>Imports System.Diagnostics
Imports System.Drawing
Imports System.Drawing.Imaging
Imports System.IO

Imports BitMiracle.LibTiff.Classic

Namespace BitMiracle.LibTiff.Samples
    Public NotInheritable Class AddPageToTiff
        Private Sub New()
        End Sub 
        Public Shared Sub Main()
            File.Copy("Sample Data\16bit.tif", "Sample Data\ToBeAppended.tif", True)

            Using image As Tiff = Tiff.Open("Sample Data\ToBeAppended.tif", "a")
                Dim newPageNumber As Integer = image.NumberOfDirectories() + 1 
                Const width As Integer = 100 
                Const height As Integer = 100

                image.SetField(TiffTag.IMAGEWIDTH, width)
                image.SetField(TiffTag.IMAGELENGTH, height)
                image.SetField(TiffTag.BITSPERSAMPLE, 8)
                image.SetField(TiffTag.SAMPLESPERPIXEL, 3)
                image.SetField(TiffTag.ROWSPERSTRIP, height)

                image.SetField(TiffTag.COMPRESSION, Compression.LZW)
                image.SetField(TiffTag.PHOTOMETRIC, Photometric.RGB)
                image.SetField(TiffTag.FILLORDER, FillOrder.MSB2LSB)
                image.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)

                Dim buffer As Byte() = Nothing 
                Using bmp As New Bitmap(width, height, PixelFormat.Format24bppRgb)
                    Using g As Graphics = Graphics.FromImage(bmp)
                        g.FillRectangle(Brushes.White, g.VisibleClipBounds)
                        Dim s As String = newPageNumber.ToString()
                        Dim f As Font = SystemFonts.DefaultFont

                        Dim size As SizeF = g.MeasureString(s, f)
                        Dim loc As New PointF(Math.Max((bmp.Width - size.Width) / 2, 0), Math.Max((bmp.Height - size.Height) / 2, 0))
                        g.DrawString(s, f, Brushes.Black, loc)

                        buffer = getImageRasterBytes(bmp, PixelFormat.Format24bppRgb)
                    End Using 
                End Using 

                Dim stride As Integer = buffer.Length \ height
                convertRGBSamples(buffer, width, height)

                Dim i As Integer = 0, offset As Integer = 0 
                While i &lt; height
                    image.WriteScanline(buffer, offset, i, 0)
                    offset += stride
                    i += 1 
                End While 
            End Using

            Process.Start("Sample Data\ToBeAppended.tif")
        End Sub 

        Private Shared Function getImageRasterBytes(ByVal bmp As Bitmap, ByVal format As PixelFormat) As Byte()
            Dim rect As New Rectangle(0, 0, bmp.Width, bmp.Height)
            Dim bits As Byte() = Nothing 

            Try 
                ' Lock the managed memory 
                Dim bmpdata As BitmapData = bmp.LockBits(rect, ImageLockMode.ReadWrite, format)

                ' Declare an array to hold the bytes of the bitmap.
                bits = New Byte(bmpdata.Stride * bmpdata.Height - 1) {}

                ' Copy the values into the array.
                System.Runtime.InteropServices.Marshal.Copy(bmpdata.Scan0, bits, 0, bits.Length)

                ' Release managed memory
                bmp.UnlockBits(bmpdata)
            Catch 
                Return Nothing 
            End Try 

            Return bits
        End Function 

        ''' &lt;summary&gt; 
        ''' Converts BGR samples into RGB samples 
        ''' &lt;/summary&gt; 
        Private Shared Sub convertRGBSamples(ByVal data As Byte(), ByVal width As Integer, ByVal height As Integer)
            Dim stride As Integer = data.Length \ height
            Const samplesPerPixel As Integer = 3 

            For y As Integer = 0 To height - 1 
                Dim offset As Integer = stride * y
                Dim strideEnd As Integer = offset + width * samplesPerPixel

                Dim i As Integer = offset
                While i &lt; strideEnd
                    Dim temp As Byte = data(i + 2)
                    data(i + 2) = data(i)
                    data(i) = temp
                    i += samplesPerPixel
                End While 
            Next 
        End Sub 
    End Class 
End Namespace</pre></div><div id="ID0EAAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAAAAAA');</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p /><p><a href="http://www.bitmiracle.com/libtiff" target="_blank"><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /> 
						Copyright © 2008-2013 Bit Miracle. All rights reserved. (http://www.bitmiracle.com/libtiff)</a></p><div class="OH_feedbacklink"><a href="mailto:support@bitmiracle.com?subject=LibTiff.Net%2c+the+managed+version+of+the+LibTiff+library+for+reading+and+writing+TIFF.+Add+page+to+existing+TIFF+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to support@bitmiracle.com.</div></div></body></html>