<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><link rel="SHORTCUT ICON" href="./../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style><link rel="stylesheet" type="text/css" href="./../styles/branding.css" /><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" /><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Create TIFF with palette (color map)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="4821a437-c9e1-4206-bfee-e19f33ce7943" /><meta name="Description" content="This sample shows how to create TIFF image with colormap (palette)." /><meta name="Microsoft.Help.ContentType" content="Samples" /><meta name="BrandingAware" content="'true'" /><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" /><link type="text/css" rel="stylesheet" href="./../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"><!----></script><meta name="SelfBranded" content="true" /></head><body onload="onLoad()" class="primary-mtps-offline-document"><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdTitleColumn">Create TIFF with palette (color map)</td><td class="OH_tdRunningTitleColumn">LibTiff.Net, the managed version of the LibTiff library for reading and writing TIFF.</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><div class="introduction"><p>This sample shows how to create TIFF image with colormap (palette).</p><p></p><p>In this sample we use palette containing 256 colors. Please note that a TIFF palette may contain more than 256 colors.</p></div><div id="ID0EBAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EBAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EBAAAAA_tabimgleft"></div><div id="ID0EBAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EBAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EBAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EBAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EBAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EBAAAAA_tabimgright"></div></div><div id="ID0EBAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EBAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EBAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EBAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EBAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-keyword">using</span> System.Diagnostics;

<span class="highlight-keyword">using</span> BitMiracle.LibTiff.Classic;

<span class="highlight-keyword">namespace</span> BitMiracle.LibTiff.Samples
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">class</span> TiffWithColorMap
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main()
        {
            <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> numberOfColors = <span class="highlight-number">256</span>;
            <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> width = <span class="highlight-number">32</span>;
            <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> height = <span class="highlight-number">100</span>;
            <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> samplesPerPixel = <span class="highlight-number">1</span>;
            <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> bitsPerSample = <span class="highlight-number">8</span>;
            <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> fileName = <span class="highlight-literal">"TiffWithColorMap.tif"</span>;

            <span class="highlight-keyword">using</span> (Tiff output = Tiff.Open(fileName, <span class="highlight-literal">"w"</span>))
            {
                output.SetField(TiffTag.IMAGEWIDTH, width / samplesPerPixel);
                output.SetField(TiffTag.SAMPLESPERPIXEL, samplesPerPixel);
                output.SetField(TiffTag.BITSPERSAMPLE, bitsPerSample);
                output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT);
                output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);
                output.SetField(TiffTag.PHOTOMETRIC, Photometric.PALETTE);
                output.SetField(TiffTag.ROWSPERSTRIP, output.DefaultStripSize(<span class="highlight-number">0</span>));

                <span class="highlight-comment">// it is good idea to specify resolution too (but it is not necessary)</span>
                output.SetField(TiffTag.XRESOLUTION, <span class="highlight-number">100.0</span>);
                output.SetField(TiffTag.YRESOLUTION, <span class="highlight-number">100.0</span>);
                output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH);

                <span class="highlight-comment">// compression is optional</span>
                output.SetField(TiffTag.COMPRESSION, Compression.ADOBE_DEFLATE);

                <span class="highlight-comment">// fill color tables</span> 
                <span class="highlight-keyword">ushort</span>[] redTable = <span class="highlight-keyword">new</span> <span class="highlight-keyword">ushort</span>[<span class="highlight-number">1</span> &lt;&lt; bitsPerSample];
                <span class="highlight-keyword">ushort</span>[] greenTable = <span class="highlight-keyword">new</span> <span class="highlight-keyword">ushort</span>[<span class="highlight-number">1</span> &lt;&lt; bitsPerSample];
                <span class="highlight-keyword">ushort</span>[] blueTable = <span class="highlight-keyword">new</span> <span class="highlight-keyword">ushort</span>[<span class="highlight-number">1</span> &lt;&lt; bitsPerSample];
                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; numberOfColors; ++i)
                {
                    redTable[i] = (<span class="highlight-keyword">ushort</span>)(<span class="highlight-number">100</span> * i);
                    greenTable[i] = (<span class="highlight-keyword">ushort</span>)(<span class="highlight-number">150</span> * i);
                    blueTable[i] = (<span class="highlight-keyword">ushort</span>)(<span class="highlight-number">200</span> * i);
                }
                output.SetField(TiffTag.COLORMAP, redTable, greenTable, blueTable);

                <span class="highlight-comment">// fill samples array</span> 
                <span class="highlight-keyword">byte</span>[][] buffer = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[height][];
                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> j = <span class="highlight-number">0</span>; j &lt; height; j++)
                {
                    buffer[j] = <span class="highlight-keyword">new</span> <span class="highlight-keyword">byte</span>[width];
                    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; width; i++)
                        buffer[j][i] = (<span class="highlight-keyword">byte</span>)(j * width + i);
                }

                <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> j = <span class="highlight-number">0</span>; j &lt; height; ++j)
                    output.WriteScanline(buffer[j], j);
            }

            Process.Start(fileName);
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>using System.Diagnostics;

using BitMiracle.LibTiff.Classic;

namespace BitMiracle.LibTiff.Samples
{
    public static class TiffWithColorMap
    {
        public static void Main()
        {
            const int numberOfColors = 256;
            const int width = 32;
            const int height = 100;
            const int samplesPerPixel = 1;
            const int bitsPerSample = 8;
            const string fileName = "TiffWithColorMap.tif";

            using (Tiff output = Tiff.Open(fileName, "w"))
            {
                output.SetField(TiffTag.IMAGEWIDTH, width / samplesPerPixel);
                output.SetField(TiffTag.SAMPLESPERPIXEL, samplesPerPixel);
                output.SetField(TiffTag.BITSPERSAMPLE, bitsPerSample);
                output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT);
                output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG);
                output.SetField(TiffTag.PHOTOMETRIC, Photometric.PALETTE);
                output.SetField(TiffTag.ROWSPERSTRIP, output.DefaultStripSize(0));

                // it is good idea to specify resolution too (but it is not necessary)
                output.SetField(TiffTag.XRESOLUTION, 100.0);
                output.SetField(TiffTag.YRESOLUTION, 100.0);
                output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH);

                // compression is optional
                output.SetField(TiffTag.COMPRESSION, Compression.ADOBE_DEFLATE);

                // fill color tables 
                ushort[] redTable = new ushort[1 &lt;&lt; bitsPerSample];
                ushort[] greenTable = new ushort[1 &lt;&lt; bitsPerSample];
                ushort[] blueTable = new ushort[1 &lt;&lt; bitsPerSample];
                for (int i = 0; i &lt; numberOfColors; ++i)
                {
                    redTable[i] = (ushort)(100 * i);
                    greenTable[i] = (ushort)(150 * i);
                    blueTable[i] = (ushort)(200 * i);
                }
                output.SetField(TiffTag.COLORMAP, redTable, greenTable, blueTable);

                // fill samples array 
                byte[][] buffer = new byte[height][];
                for (int j = 0; j &lt; height; j++)
                {
                    buffer[j] = new byte[width];
                    for (int i = 0; i &lt; width; i++)
                        buffer[j][i] = (byte)(j * width + i);
                }

                for (int j = 0; j &lt; height; ++j)
                    output.WriteScanline(buffer[j], j);
            }

            Process.Start(fileName);
        }
    }
}</pre></div><div id="ID0EBAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EBAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBAAAAA');</script><div id="ID0EAAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EAAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAAAAA_tabimgleft"></div><div id="ID0EAAAAAA_tab1" class="OH_CodeSnippetContainerTabDisabled" EnableCopyCode="true" disabled="true"><a>C#</a></div><div id="ID0EAAAAAA_tab2" class="OH_CodeSnippetContainerTab" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EAAAAAA','Visual Basic','2','4');return false;">VB</a></div><div id="ID0EAAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EAAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EAAAAAA_tabimgright"></div></div><div id="ID0EAAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EAAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EAAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EAAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EAAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre><span class="highlight-keyword">Imports</span> System.Diagnostics

<span class="highlight-keyword">Imports</span> BitMiracle.LibTiff.Classic

<span class="highlight-keyword">Namespace</span> BitMiracle.LibTiff.Samples
    <span class="highlight-keyword">Public</span> <span class="highlight-keyword">NotInheritable</span> <span class="highlight-keyword">Class</span> TiffWithColorMap
        <span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>()
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 
        <span class="highlight-keyword">Public</span> <span class="highlight-keyword">Shared</span> <span class="highlight-keyword">Sub</span> Main()
            <span class="highlight-keyword">Const</span> numberOfColors <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">256</span> 
            <span class="highlight-keyword">Const</span> width <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">32</span> 
            <span class="highlight-keyword">Const</span> height <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">100</span> 
            <span class="highlight-keyword">Const</span> samplesPerPixel <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">1</span> 
            <span class="highlight-keyword">Const</span> bitsPerSample <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">8</span> 
            <span class="highlight-keyword">Const</span> fileName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-literal">"TiffWithColorMap.tif"</span> 

            <span class="highlight-keyword">Using</span> output <span class="highlight-keyword">As</span> Tiff = Tiff.Open(fileName, <span class="highlight-literal">"w"</span>)
                output.SetField(TiffTag.IMAGEWIDTH, width / samplesPerPixel)
                output.SetField(TiffTag.SAMPLESPERPIXEL, samplesPerPixel)
                output.SetField(TiffTag.BITSPERSAMPLE, bitsPerSample)
                output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT)
                output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)
                output.SetField(TiffTag.PHOTOMETRIC, Photometric.PALETTE)
                output.SetField(TiffTag.ROWSPERSTRIP, output.DefaultStripSize(<span class="highlight-number">0</span>))

                <span class="highlight-comment">' it is good idea to specify resolution too (but it is not necessary)</span>
                output.SetField(TiffTag.XRESOLUTION, <span class="highlight-number">100.0</span>)
                output.SetField(TiffTag.YRESOLUTION, <span class="highlight-number">100.0</span>)
                output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH)

                <span class="highlight-comment">' compression is optional</span>
                output.SetField(TiffTag.COMPRESSION, Compression.ADOBE_DEFLATE)

                <span class="highlight-comment">' fill color tables</span> 
                <span class="highlight-keyword">Dim</span> redTable <span class="highlight-keyword">As</span> <span class="highlight-keyword">UShort</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">UShort</span>((<span class="highlight-number">1</span> &lt;&lt; bitsPerSample) - <span class="highlight-number">1</span>) {}
                <span class="highlight-keyword">Dim</span> greenTable <span class="highlight-keyword">As</span> <span class="highlight-keyword">UShort</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">UShort</span>((<span class="highlight-number">1</span> &lt;&lt; bitsPerSample) - <span class="highlight-number">1</span>) {}
                <span class="highlight-keyword">Dim</span> blueTable <span class="highlight-keyword">As</span> <span class="highlight-keyword">UShort</span>() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">UShort</span>((<span class="highlight-number">1</span> &lt;&lt; bitsPerSample) - <span class="highlight-number">1</span>) {}
                <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> numberOfColors - <span class="highlight-number">1</span>
                    redTable(i) = <span class="highlight-keyword">CUShort</span>(<span class="highlight-number">100</span> * i)
                    greenTable(i) = <span class="highlight-keyword">CUShort</span>(<span class="highlight-number">150</span> * i)
                    blueTable(i) = <span class="highlight-keyword">CUShort</span>(<span class="highlight-number">200</span> * i)
                <span class="highlight-keyword">Next</span>
                output.SetField(TiffTag.COLORMAP, redTable, greenTable, blueTable)

                <span class="highlight-comment">' fill samples array</span> 
                <span class="highlight-keyword">Dim</span> buffer <span class="highlight-keyword">As</span> <span class="highlight-keyword">Byte</span>()() = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(height - <span class="highlight-number">1</span>)() {}
                <span class="highlight-keyword">For</span> j <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> height - <span class="highlight-number">1</span>
                    buffer(j) = <span class="highlight-keyword">New</span> <span class="highlight-keyword">Byte</span>(width - <span class="highlight-number">1</span>) {}
                    <span class="highlight-keyword">For</span> i <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> width - <span class="highlight-number">1</span>
                        buffer(j)(i) = (j * width + i) <span class="highlight-keyword">Mod</span> <span class="highlight-number">256</span> 
                    <span class="highlight-keyword">Next</span> 
                <span class="highlight-keyword">Next</span> 

                <span class="highlight-keyword">For</span> j <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-number">0</span> <span class="highlight-keyword">To</span> height - <span class="highlight-number">1</span>
                    output.WriteScanline(buffer(j), j)
                <span class="highlight-keyword">Next</span> 
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>

            Process.Start(fileName)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span> 
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Class</span> 
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Namespace</span></pre></div><div id="ID0EAAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre>Imports System.Diagnostics

Imports BitMiracle.LibTiff.Classic

Namespace BitMiracle.LibTiff.Samples
    Public NotInheritable Class TiffWithColorMap
        Private Sub New()
        End Sub 
        Public Shared Sub Main()
            Const numberOfColors As Integer = 256 
            Const width As Integer = 32 
            Const height As Integer = 100 
            Const samplesPerPixel As Integer = 1 
            Const bitsPerSample As Integer = 8 
            Const fileName As String = "TiffWithColorMap.tif" 

            Using output As Tiff = Tiff.Open(fileName, "w")
                output.SetField(TiffTag.IMAGEWIDTH, width / samplesPerPixel)
                output.SetField(TiffTag.SAMPLESPERPIXEL, samplesPerPixel)
                output.SetField(TiffTag.BITSPERSAMPLE, bitsPerSample)
                output.SetField(TiffTag.ORIENTATION, Orientation.TOPLEFT)
                output.SetField(TiffTag.PLANARCONFIG, PlanarConfig.CONTIG)
                output.SetField(TiffTag.PHOTOMETRIC, Photometric.PALETTE)
                output.SetField(TiffTag.ROWSPERSTRIP, output.DefaultStripSize(0))

                ' it is good idea to specify resolution too (but it is not necessary)
                output.SetField(TiffTag.XRESOLUTION, 100.0)
                output.SetField(TiffTag.YRESOLUTION, 100.0)
                output.SetField(TiffTag.RESOLUTIONUNIT, ResUnit.INCH)

                ' compression is optional
                output.SetField(TiffTag.COMPRESSION, Compression.ADOBE_DEFLATE)

                ' fill color tables 
                Dim redTable As UShort() = New UShort((1 &lt;&lt; bitsPerSample) - 1) {}
                Dim greenTable As UShort() = New UShort((1 &lt;&lt; bitsPerSample) - 1) {}
                Dim blueTable As UShort() = New UShort((1 &lt;&lt; bitsPerSample) - 1) {}
                For i As Integer = 0 To numberOfColors - 1
                    redTable(i) = CUShort(100 * i)
                    greenTable(i) = CUShort(150 * i)
                    blueTable(i) = CUShort(200 * i)
                Next
                output.SetField(TiffTag.COLORMAP, redTable, greenTable, blueTable)

                ' fill samples array 
                Dim buffer As Byte()() = New Byte(height - 1)() {}
                For j As Integer = 0 To height - 1
                    buffer(j) = New Byte(width - 1) {}
                    For i As Integer = 0 To width - 1
                        buffer(j)(i) = (j * width + i) Mod 256 
                    Next 
                Next 

                For j As Integer = 0 To height - 1
                    output.WriteScanline(buffer(j), j)
                Next 
            End Using

            Process.Start(fileName)
        End Sub 
    End Class 
End Namespace</pre></div><div id="ID0EAAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAAAAAA');</script></div></div></div></div><div id="OH_footer" class="OH_footer"><p /><p><a href="http://www.bitmiracle.com/libtiff" target="_blank"><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /> 
						Copyright © 2008-2013 Bit Miracle. All rights reserved. (http://www.bitmiracle.com/libtiff)</a></p><div class="OH_feedbacklink"><a href="mailto:support@bitmiracle.com?subject=LibTiff.Net%2c+the+managed+version+of+the+LibTiff+library+for+reading+and+writing+TIFF.+Create+TIFF+with+palette+(color+map)+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to support@bitmiracle.com.</div></div></body></html>